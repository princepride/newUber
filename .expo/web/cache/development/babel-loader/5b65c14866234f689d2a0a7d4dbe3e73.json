{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"background\", \"borderless\", \"disabled\", \"rippleColor\", \"underlayColor\", \"children\", \"theme\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { withTheme } from \"../../core/theming\";\nimport { getTouchableRippleColors } from \"./utils\";\n\nvar TouchableRipple = function TouchableRipple(_ref) {\n  var style = _ref.style,\n    _background = _ref.background,\n    _ref$borderless = _ref.borderless,\n    borderless = _ref$borderless === void 0 ? false : _ref$borderless,\n    disabledProp = _ref.disabled,\n    rippleColor = _ref.rippleColor,\n    _underlayColor = _ref.underlayColor,\n    children = _ref.children,\n    theme = _ref.theme,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var handlePressIn = function handlePressIn(e) {\n    var _touches$;\n    var centered = rest.centered,\n      onPressIn = rest.onPressIn;\n    onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(e);\n    var _getTouchableRippleCo = getTouchableRippleColors({\n        theme: theme,\n        rippleColor: rippleColor\n      }),\n      calculatedRippleColor = _getTouchableRippleCo.calculatedRippleColor;\n    var button = e.currentTarget;\n    var style = window.getComputedStyle(button);\n    var dimensions = button.getBoundingClientRect();\n    var touchX;\n    var touchY;\n    var _e$nativeEvent = e.nativeEvent,\n      changedTouches = _e$nativeEvent.changedTouches,\n      touches = _e$nativeEvent.touches;\n    var touch = (_touches$ = touches === null || touches === void 0 ? void 0 : touches[0]) !== null && _touches$ !== void 0 ? _touches$ : changedTouches === null || changedTouches === void 0 ? void 0 : changedTouches[0];\n\n    if (centered || !touch) {\n      touchX = dimensions.width / 2;\n      touchY = dimensions.height / 2;\n    } else {\n      var _touch$locationX, _touch$locationY;\n      touchX = (_touch$locationX = touch.locationX) !== null && _touch$locationX !== void 0 ? _touch$locationX : e.pageX;\n      touchY = (_touch$locationY = touch.locationY) !== null && _touch$locationY !== void 0 ? _touch$locationY : e.pageY;\n    }\n\n    var size = centered ?\n    Math.min(dimensions.width, dimensions.height) * 1.25 :\n    Math.max(dimensions.width, dimensions.height) * 2;\n\n    var container = document.createElement('span');\n    container.setAttribute('data-paper-ripple', '');\n    Object.assign(container.style, {\n      position: 'absolute',\n      pointerEvents: 'none',\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      borderTopLeftRadius: style.borderTopLeftRadius,\n      borderTopRightRadius: style.borderTopRightRadius,\n      borderBottomRightRadius: style.borderBottomRightRadius,\n      borderBottomLeftRadius: style.borderBottomLeftRadius,\n      overflow: centered ? 'visible' : 'hidden'\n    });\n\n    var ripple = document.createElement('span');\n    Object.assign(ripple.style, {\n      position: 'absolute',\n      pointerEvents: 'none',\n      backgroundColor: calculatedRippleColor,\n      borderRadius: '50%',\n      transitionProperty: 'transform opacity',\n      transitionDuration: Math.min(size * 1.5, 350) + \"ms\",\n      transitionTimingFunction: 'linear',\n      transformOrigin: 'center',\n      transform: 'translate3d(-50%, -50%, 0) scale3d(0.1, 0.1, 0.1)',\n      opacity: '0.5',\n      left: touchX + \"px\",\n      top: touchY + \"px\",\n      width: size + \"px\",\n      height: size + \"px\"\n    });\n\n    container.appendChild(ripple);\n    button.appendChild(container);\n\n    requestAnimationFrame(function () {\n      requestAnimationFrame(function () {\n        Object.assign(ripple.style, {\n          transform: 'translate3d(-50%, -50%, 0) scale3d(1, 1, 1)',\n          opacity: '1'\n        });\n      });\n    });\n  };\n  var handlePressOut = function handlePressOut(e) {\n    var _rest$onPressOut;\n    (_rest$onPressOut = rest.onPressOut) === null || _rest$onPressOut === void 0 ? void 0 : _rest$onPressOut.call(rest, e);\n    var containers = e.currentTarget.querySelectorAll('[data-paper-ripple]');\n    requestAnimationFrame(function () {\n      requestAnimationFrame(function () {\n        containers.forEach(function (container) {\n          var ripple = container.firstChild;\n          Object.assign(ripple.style, {\n            transitionDuration: '250ms',\n            opacity: 0\n          });\n\n          setTimeout(function () {\n            var parentNode = container.parentNode;\n            if (parentNode) {\n              parentNode.removeChild(container);\n            }\n          }, 500);\n        });\n      });\n    });\n  };\n  var disabled = disabledProp || !rest.onPress;\n  return React.createElement(TouchableWithoutFeedback, _extends({}, rest, {\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    disabled: disabled\n  }), React.createElement(View, {\n    style: [styles.touchable, borderless && styles.borderless, style]\n  }, React.Children.only(children)));\n};\n\nTouchableRipple.supported = true;\nvar styles = StyleSheet.create({\n  touchable: _objectSpread({\n    position: 'relative'\n  }, Platform.OS === 'web' && {\n    cursor: 'pointer'\n  }),\n  borderless: {\n    overflow: 'hidden'\n  }\n});\nexport default withTheme(TouchableRipple);","map":{"version":3,"sources":["TouchableRipple.tsx"],"names":["React","withTheme","getTouchableRippleColors","TouchableRipple","style","background","_background","borderless","disabled","disabledProp","rippleColor","underlayColor","_underlayColor","children","theme","rest","handlePressIn","e","centered","onPressIn","calculatedRippleColor","button","currentTarget","window","getComputedStyle","dimensions","getBoundingClientRect","touchX","touchY","changedTouches","touches","nativeEvent","touch","width","height","locationX","pageX","locationY","pageY","size","Math","min","max","container","document","createElement","setAttribute","Object","assign","position","pointerEvents","top","left","right","bottom","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","overflow","ripple","backgroundColor","borderRadius","transitionProperty","transitionDuration","transitionTimingFunction","transformOrigin","transform","opacity","appendChild","requestAnimationFrame","handlePressOut","onPressOut","containers","querySelectorAll","forEach","firstChild","setTimeout","parentNode","removeChild","onPress","styles","touchable","Children","only","supported","create","Platform","OS","cursor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n  Platform,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport type { Theme } from '../../types';\nimport { getTouchableRippleColors } from './utils';\n\nexport type Props = React.ComponentPropsWithRef<\n  typeof TouchableWithoutFeedback\n> & {\n  /**\n   * Whether to render the ripple outside the view bounds.\n   */\n  borderless?: boolean;\n  /**\n   * Type of background drawabale to display the feedback (Android).\n   * https://reactnative.dev/docs/touchablenativefeedback#background\n   */\n  background?: Object;\n  /**\n   * Whether to start the ripple at the center (Web).\n   */\n  centered?: boolean;\n  /**\n   * Whether to prevent interaction with the touchable.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press. If not set, will cause the touchable to be disabled.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Color of the ripple effect (Android >= 5.0 and Web).\n   */\n  rippleColor?: string;\n  /**\n   * Color of the underlay for the highlight effect (Android < 5.0 and iOS).\n   */\n  underlayColor?: string;\n  /**\n   * Content of the `TouchableRipple`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * A wrapper for views that should respond to touches.\n * Provides a material \"ink ripple\" interaction effect for supported platforms (>= Android Lollipop).\n * On unsupported platforms, it falls back to a highlight effect.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/touchable-ripple.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Text, TouchableRipple } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <TouchableRipple\n *     onPress={() => console.log('Pressed')}\n *     rippleColor=\"rgba(0, 0, 0, .32)\"\n *   >\n *     <Text>Press anywhere</Text>\n *   </TouchableRipple>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableWithoutFeedback props https://reactnative.dev/docs/touchablewithoutfeedback#props\n */\nconst TouchableRipple = ({\n  style,\n  background: _background,\n  borderless = false,\n  disabled: disabledProp,\n  rippleColor,\n  underlayColor: _underlayColor,\n  children,\n  theme,\n  ...rest\n}: Props) => {\n  const handlePressIn = (e: any) => {\n    const { centered, onPressIn } = rest;\n\n    onPressIn?.(e);\n\n    const { calculatedRippleColor } = getTouchableRippleColors({\n      theme,\n      rippleColor,\n    });\n\n    const button = e.currentTarget;\n    const style = window.getComputedStyle(button);\n    const dimensions = button.getBoundingClientRect();\n\n    let touchX;\n    let touchY;\n\n    const { changedTouches, touches } = e.nativeEvent;\n    const touch = touches?.[0] ?? changedTouches?.[0];\n\n    // If centered or it was pressed using keyboard - enter or space\n    if (centered || !touch) {\n      touchX = dimensions.width / 2;\n      touchY = dimensions.height / 2;\n    } else {\n      touchX = touch.locationX ?? e.pageX;\n      touchY = touch.locationY ?? e.pageY;\n    }\n\n    // Get the size of the button to determine how big the ripple should be\n    const size = centered\n      ? // If ripple is always centered, we don't need to make it too big\n        Math.min(dimensions.width, dimensions.height) * 1.25\n      : // Otherwise make it twice as big so clicking on one end spreads ripple to other\n        Math.max(dimensions.width, dimensions.height) * 2;\n\n    // Create a container for our ripple effect so we don't need to change the parent's style\n    const container = document.createElement('span');\n\n    container.setAttribute('data-paper-ripple', '');\n\n    Object.assign(container.style, {\n      position: 'absolute',\n      pointerEvents: 'none',\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      borderTopLeftRadius: style.borderTopLeftRadius,\n      borderTopRightRadius: style.borderTopRightRadius,\n      borderBottomRightRadius: style.borderBottomRightRadius,\n      borderBottomLeftRadius: style.borderBottomLeftRadius,\n      overflow: centered ? 'visible' : 'hidden',\n    });\n\n    // Create span to show the ripple effect\n    const ripple = document.createElement('span');\n\n    Object.assign(ripple.style, {\n      position: 'absolute',\n      pointerEvents: 'none',\n      backgroundColor: calculatedRippleColor,\n      borderRadius: '50%',\n\n      /* Transition configuration */\n      transitionProperty: 'transform opacity',\n      transitionDuration: `${Math.min(size * 1.5, 350)}ms`,\n      transitionTimingFunction: 'linear',\n      transformOrigin: 'center',\n\n      /* We'll animate these properties */\n      transform: 'translate3d(-50%, -50%, 0) scale3d(0.1, 0.1, 0.1)',\n      opacity: '0.5',\n\n      // Position the ripple where cursor was\n      left: `${touchX}px`,\n      top: `${touchY}px`,\n      width: `${size}px`,\n      height: `${size}px`,\n    });\n\n    // Finally, append it to DOM\n    container.appendChild(ripple);\n    button.appendChild(container);\n\n    // rAF runs in the same frame as the event handler\n    // Use double rAF to ensure the transition class is added in next frame\n    // This will make sure that the transition animation is triggered\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        Object.assign(ripple.style, {\n          transform: 'translate3d(-50%, -50%, 0) scale3d(1, 1, 1)',\n          opacity: '1',\n        });\n      });\n    });\n  };\n\n  const handlePressOut = (e: any) => {\n    rest.onPressOut?.(e);\n\n    const containers = e.currentTarget.querySelectorAll(\n      '[data-paper-ripple]'\n    ) as HTMLElement[];\n\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        containers.forEach((container) => {\n          const ripple = container.firstChild as HTMLSpanElement;\n\n          Object.assign(ripple.style, {\n            transitionDuration: '250ms',\n            opacity: 0,\n          });\n\n          // Finally remove the span after the transition\n          setTimeout(() => {\n            const { parentNode } = container;\n\n            if (parentNode) {\n              parentNode.removeChild(container);\n            }\n          }, 500);\n        });\n      });\n    });\n  };\n\n  const disabled = disabledProp || !rest.onPress;\n\n  return (\n    <TouchableWithoutFeedback\n      {...rest}\n      onPressIn={handlePressIn}\n      onPressOut={handlePressOut}\n      disabled={disabled}\n    >\n      <View style={[styles.touchable, borderless && styles.borderless, style]}>\n        {React.Children.only(children)}\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\n/**\n * Whether ripple effect is supported.\n */\nTouchableRipple.supported = true;\n\nconst styles = StyleSheet.create({\n  touchable: {\n    position: 'relative',\n    ...(Platform.OS === 'web' && { cursor: 'pointer' }),\n  },\n  borderless: {\n    overflow: 'hidden',\n  },\n});\n\nexport default withTheme(TouchableRipple);\n"]},"metadata":{},"sourceType":"module"}