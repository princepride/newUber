{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"status\", \"label\", \"onPress\", \"labelStyle\", \"theme\", \"testID\", \"mode\", \"position\", \"accessibilityLabel\", \"disabled\", \"labelVariant\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Checkbox from \"./Checkbox\";\nimport CheckboxAndroid from \"./CheckboxAndroid\";\nimport CheckboxIOS from \"./CheckboxIOS\";\nimport Text from \"../Typography/Text\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { withTheme } from \"../../core/theming\";\n\nvar CheckboxItem = function CheckboxItem(_ref) {\n  var style = _ref.style,\n    status = _ref.status,\n    label = _ref.label,\n    onPress = _ref.onPress,\n    labelStyle = _ref.labelStyle,\n    theme = _ref.theme,\n    testID = _ref.testID,\n    mode = _ref.mode,\n    _ref$position = _ref.position,\n    position = _ref$position === void 0 ? 'trailing' : _ref$position,\n    _ref$accessibilityLab = _ref.accessibilityLabel,\n    accessibilityLabel = _ref$accessibilityLab === void 0 ? label : _ref$accessibilityLab,\n    disabled = _ref.disabled,\n    _ref$labelVariant = _ref.labelVariant,\n    labelVariant = _ref$labelVariant === void 0 ? 'bodyLarge' : _ref$labelVariant,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var checkboxProps = _objectSpread(_objectSpread({}, props), {}, {\n    status: status,\n    theme: theme,\n    disabled: disabled\n  });\n  var isLeading = position === 'leading';\n  var checkbox;\n  if (mode === 'android') {\n    checkbox = React.createElement(CheckboxAndroid, checkboxProps);\n  } else if (mode === 'ios') {\n    checkbox = React.createElement(CheckboxIOS, checkboxProps);\n  } else {\n    checkbox = React.createElement(Checkbox, checkboxProps);\n  }\n  var textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  var disabledTextColor = theme.isV3 ? theme.colors.onSurfaceDisabled : theme.colors.disabled;\n  var textAlign = isLeading ? 'right' : 'left';\n  var computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign: textAlign\n  };\n  return React.createElement(TouchableRipple, {\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      checked: status === 'checked',\n      disabled: disabled\n    },\n    onPress: onPress,\n    testID: testID,\n    disabled: disabled\n  }, React.createElement(View, {\n    style: [styles.container, style],\n    pointerEvents: \"none\",\n    importantForAccessibility: \"no-hide-descendants\"\n  }, isLeading && checkbox, React.createElement(Text, {\n    variant: labelVariant,\n    style: [styles.label, !theme.isV3 && styles.font, computedStyle, labelStyle]\n  }, label), !isLeading && checkbox));\n};\nCheckboxItem.displayName = 'Checkbox.Item';\nexport default withTheme(CheckboxItem);\n\nvar CheckboxItemWithTheme = withTheme(CheckboxItem);\n\nexport { CheckboxItemWithTheme as CheckboxItem };\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1\n  },\n  font: {\n    fontSize: 16\n  }\n});","map":{"version":3,"sources":["CheckboxItem.tsx"],"names":["React","Checkbox","CheckboxAndroid","CheckboxIOS","Text","TouchableRipple","withTheme","CheckboxItem","style","status","label","onPress","labelStyle","theme","testID","mode","position","accessibilityLabel","disabled","labelVariant","props","checkboxProps","isLeading","checkbox","textColor","isV3","colors","onSurface","text","disabledTextColor","onSurfaceDisabled","textAlign","computedStyle","color","checked","styles","container","font","displayName","CheckboxItemWithTheme","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","flexShrink","flexGrow","fontSize"],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport Checkbox from './Checkbox';\nimport CheckboxAndroid from './CheckboxAndroid';\nimport CheckboxIOS from './CheckboxIOS';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { MD3TypescaleKey, Theme } from '../../types';\n\nexport type Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Label text variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  labelVariant?: keyof typeof MD3TypescaleKey;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Checkbox control position.\n   */\n  position?: 'leading' | 'trailing';\n  /**\n   * Whether `<Checkbox.Android />` or `<Checkbox.IOS />` should be used.\n   * Left undefined `<Checkbox />` will be used.\n   */\n  mode?: 'android' | 'ios';\n};\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nconst CheckboxItem = ({\n  style,\n  status,\n  label,\n  onPress,\n  labelStyle,\n  theme,\n  testID,\n  mode,\n  position = 'trailing',\n  accessibilityLabel = label,\n  disabled,\n  labelVariant = 'bodyLarge',\n  ...props\n}: Props) => {\n  const checkboxProps = { ...props, status, theme, disabled };\n  const isLeading = position === 'leading';\n  let checkbox;\n\n  if (mode === 'android') {\n    checkbox = <CheckboxAndroid {...checkboxProps} />;\n  } else if (mode === 'ios') {\n    checkbox = <CheckboxIOS {...checkboxProps} />;\n  } else {\n    checkbox = <Checkbox {...checkboxProps} />;\n  }\n\n  const textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  const disabledTextColor = theme.isV3\n    ? theme.colors.onSurfaceDisabled\n    : theme.colors.disabled;\n  const textAlign = isLeading ? 'right' : 'left';\n\n  const computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign,\n  } as TextStyle;\n\n  return (\n    <TouchableRipple\n      accessibilityLabel={accessibilityLabel}\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{\n        checked: status === 'checked',\n        disabled,\n      }}\n      onPress={onPress}\n      testID={testID}\n      disabled={disabled}\n    >\n      <View\n        style={[styles.container, style]}\n        pointerEvents=\"none\"\n        importantForAccessibility=\"no-hide-descendants\"\n      >\n        {isLeading && checkbox}\n        <Text\n          variant={labelVariant}\n          style={[\n            styles.label,\n            !theme.isV3 && styles.font,\n            computedStyle,\n            labelStyle,\n          ]}\n        >\n          {label}\n        </Text>\n        {!isLeading && checkbox}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\n\nexport default withTheme(CheckboxItem);\n\n// @component-docs ignore-next-line\nconst CheckboxItemWithTheme = withTheme(CheckboxItem);\n// @component-docs ignore-next-line\nexport { CheckboxItemWithTheme as CheckboxItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n  font: {\n    fontSize: 16,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}