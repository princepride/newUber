{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"elevation\", \"onLongPress\", \"onPress\", \"mode\", \"children\", \"style\", \"theme\", \"testID\", \"accessible\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport CardContent from \"./CardContent\";\nimport CardActions from \"./CardActions\";\n\nimport CardCover from \"./CardCover\";\n\nimport CardTitle from \"./CardTitle\";\nimport Surface from \"../Surface\";\nimport { withTheme } from \"../../core/theming\";\nimport { getCardColors } from \"./utils\";\n\nvar Card = function Card(_ref) {\n  var _ref$elevation = _ref.elevation,\n    cardElevation = _ref$elevation === void 0 ? 1 : _ref$elevation,\n    onLongPress = _ref.onLongPress,\n    onPress = _ref.onPress,\n    _ref$mode = _ref.mode,\n    cardMode = _ref$mode === void 0 ? 'elevated' : _ref$mode,\n    children = _ref.children,\n    style = _ref.style,\n    theme = _ref.theme,\n    testID = _ref.testID,\n    accessible = _ref.accessible,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var isMode = React.useCallback(function (modeToCompare) {\n    return cardMode === modeToCompare;\n  }, [cardMode]);\n\n  var _React$useRef = React.useRef(new Animated.Value(cardElevation)),\n    elevation = _React$useRef.current;\n\n  var _React$useRef2 = React.useRef(new Animated.Value(cardElevation)),\n    elevationDarkAdaptive = _React$useRef2.current;\n  var animation = theme.animation,\n    dark = theme.dark,\n    mode = theme.mode,\n    roundness = theme.roundness,\n    isV3 = theme.isV3;\n  var prevDarkRef = React.useRef(dark);\n  React.useEffect(function () {\n    prevDarkRef.current = dark;\n  });\n  var prevDark = prevDarkRef.current;\n  var isAdaptiveMode = mode === 'adaptive';\n  var animationDuration = 150 * animation.scale;\n  React.useEffect(function () {\n    if (dark && isAdaptiveMode && !prevDark) {\n      elevation.setValue(cardElevation);\n      elevationDarkAdaptive.setValue(cardElevation);\n    }\n  }, [prevDark, dark, isAdaptiveMode, cardElevation, elevation, elevationDarkAdaptive]);\n  var runElevationAnimation = function runElevationAnimation(pressType) {\n    var isPressTypeIn = pressType === 'in';\n    if (dark && isAdaptiveMode) {\n      Animated.timing(elevationDarkAdaptive, {\n        toValue: isPressTypeIn ? isV3 ? 2 : 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false\n      }).start();\n    } else {\n      Animated.timing(elevation, {\n        toValue: isPressTypeIn ? isV3 ? 2 : 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n  var handlePressIn = function handlePressIn() {\n    runElevationAnimation('in');\n  };\n  var handlePressOut = function handlePressOut() {\n    runElevationAnimation('out');\n  };\n  var total = React.Children.count(children);\n  var siblings = React.Children.map(children, function (child) {\n    return React.isValidElement(child) && child.type ? child.type.displayName : null;\n  });\n  var computedElevation = dark && isAdaptiveMode ? elevationDarkAdaptive : elevation;\n  var _getCardColors = getCardColors({\n      theme: theme,\n      mode: cardMode\n    }),\n    backgroundColor = _getCardColors.backgroundColor,\n    borderColor = _getCardColors.borderColor;\n  return React.createElement(Surface, _extends({\n    style: [{\n      borderRadius: roundness\n    }, isV3 && {\n      backgroundColor: backgroundColor\n    }, !isV3 && isMode('outlined') ? styles.resetElevation : {\n      elevation: computedElevation\n    }, style],\n    theme: theme\n  }, isV3 && {\n    elevation: isMode('elevated') ? computedElevation : 0\n  }, rest), isMode('outlined') && React.createElement(View, {\n    pointerEvents: \"none\",\n    style: [{\n      borderRadius: roundness,\n      borderColor: borderColor\n    }, styles.outline]\n  }), React.createElement(TouchableWithoutFeedback, {\n    delayPressIn: 0,\n    disabled: !(onPress || onLongPress),\n    onLongPress: onLongPress,\n    onPress: onPress,\n    onPressIn: onPress || onLongPress ? handlePressIn : undefined,\n    onPressOut: onPress || onLongPress ? handlePressOut : undefined,\n    testID: testID,\n    accessible: accessible\n  }, React.createElement(View, {\n    style: styles.innerContainer\n  }, React.Children.map(children, function (child, index) {\n    return React.isValidElement(child) ? React.cloneElement(child, {\n      index: index,\n      total: total,\n      siblings: siblings\n    }) : child;\n  }))));\n};\n\nCard.Content = CardContent;\n\nCard.Actions = CardActions;\n\nCard.Cover = CardCover;\n\nCard.Title = CardTitle;\nvar styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1\n  },\n  outline: {\n    borderWidth: 1,\n    position: 'absolute',\n    width: '100%',\n    height: '100%',\n    zIndex: 2\n  },\n  resetElevation: {\n    elevation: 0\n  }\n});\nexport default withTheme(Card);","map":{"version":3,"sources":["Card.tsx"],"names":["React","CardContent","CardActions","CardCover","CardTitle","Surface","withTheme","getCardColors","Card","elevation","cardElevation","onLongPress","onPress","mode","cardMode","children","style","theme","testID","accessible","rest","isMode","useCallback","modeToCompare","current","useRef","Animated","Value","elevationDarkAdaptive","animation","dark","roundness","isV3","prevDarkRef","useEffect","prevDark","isAdaptiveMode","animationDuration","scale","setValue","runElevationAnimation","pressType","isPressTypeIn","timing","toValue","duration","useNativeDriver","start","handlePressIn","handlePressOut","total","Children","count","siblings","map","child","isValidElement","type","displayName","computedElevation","backgroundColor","borderColor","borderRadius","styles","resetElevation","outline","undefined","innerContainer","index","cloneElement","Content","Actions","Cover","Title","create","flexGrow","flexShrink","borderWidth","position","width","height","zIndex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  Animated,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardCover, { CardCover as _CardCover } from './CardCover';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardTitle, { CardTitle as _CardTitle } from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\nimport type { Theme } from '../../types';\nimport { getCardColors } from './utils';\n\ntype OutlinedCardProps = {\n  mode: 'outlined';\n  elevation?: never;\n};\n\ntype ElevatedCardProps = {\n  mode?: 'elevated';\n  elevation?: number;\n};\n\ntype ContainedCardProps = {\n  mode?: 'contained';\n  elevation?: never;\n};\n\ntype HandlePressType = 'in' | 'out';\n\ntype Mode = 'elevated' | 'outlined' | 'contained';\n\nexport type Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Changes Card shadow and background on iOS and Android.\n   */\n  elevation?: 0 | 1 | 2 | 3 | 4 | 5 | Animated.Value;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Mode of the Card.\n   * - `elevated` - Card with elevation.\n   * - `contained` - Card with without outline and elevation @supported Available in v5.x with theme version 3\n   * - `outlined` - Card with an outline.\n   */\n  mode?: Mode;\n  /**\n   * Content of the `Card`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Pass down testID from card props to touchable\n   */\n  testID?: string;\n  /**\n   * Pass down accessible from card props to touchable\n   */\n  accessible?: boolean;\n};\n\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/card-1.png\" />\n *     <figcaption>Elevated card</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/card-2.png\" />\n *     <figcaption>Outlined card</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/card-3.png\" />\n *     <figcaption>Contained card</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Card = ({\n  elevation: cardElevation = 1,\n  onLongPress,\n  onPress,\n  mode: cardMode = 'elevated',\n  children,\n  style,\n  theme,\n  testID,\n  accessible,\n  ...rest\n}: (OutlinedCardProps | ElevatedCardProps | ContainedCardProps) & Props) => {\n  const isMode = React.useCallback(\n    (modeToCompare: Mode) => {\n      return cardMode === modeToCompare;\n    },\n    [cardMode]\n  );\n\n  // Default animated value\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  // Dark adaptive animated value, used in case of toggling the theme,\n  // it prevents animating the background with native drivers inside Surface\n  const { current: elevationDarkAdaptive } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  const { animation, dark, mode, roundness, isV3 } = theme;\n\n  const prevDarkRef = React.useRef<boolean>(dark);\n  React.useEffect(() => {\n    prevDarkRef.current = dark;\n  });\n\n  const prevDark = prevDarkRef.current;\n  const isAdaptiveMode = mode === 'adaptive';\n  const animationDuration = 150 * animation.scale;\n\n  React.useEffect(() => {\n    /**\n     * Resets animations values if updating to dark adaptive mode,\n     * otherwise, any card that is in the middle of animation while\n     * toggling the theme will stay at that animated value until\n     * the next press-in\n     */\n    if (dark && isAdaptiveMode && !prevDark) {\n      elevation.setValue(cardElevation);\n      elevationDarkAdaptive.setValue(cardElevation);\n    }\n  }, [\n    prevDark,\n    dark,\n    isAdaptiveMode,\n    cardElevation,\n    elevation,\n    elevationDarkAdaptive,\n  ]);\n\n  const runElevationAnimation = (pressType: HandlePressType) => {\n    const isPressTypeIn = pressType === 'in';\n    if (dark && isAdaptiveMode) {\n      Animated.timing(elevationDarkAdaptive, {\n        toValue: isPressTypeIn ? (isV3 ? 2 : 8) : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false,\n      }).start();\n    } else {\n      Animated.timing(elevation, {\n        toValue: isPressTypeIn ? (isV3 ? 2 : 8) : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const handlePressIn = () => {\n    runElevationAnimation('in');\n  };\n\n  const handlePressOut = () => {\n    runElevationAnimation('out');\n  };\n\n  const total = React.Children.count(children);\n  const siblings = React.Children.map(children, (child) =>\n    React.isValidElement(child) && child.type\n      ? (child.type as any).displayName\n      : null\n  );\n  const computedElevation =\n    dark && isAdaptiveMode ? elevationDarkAdaptive : elevation;\n\n  const { backgroundColor, borderColor } = getCardColors({\n    theme,\n    mode: cardMode,\n  });\n\n  return (\n    <Surface\n      style={[\n        {\n          borderRadius: roundness,\n        },\n        isV3 && { backgroundColor },\n        !isV3 && isMode('outlined')\n          ? styles.resetElevation\n          : {\n              elevation: computedElevation as unknown as number,\n            },\n        style,\n      ]}\n      theme={theme}\n      {...(isV3 && {\n        elevation: isMode('elevated') ? computedElevation : 0,\n      })}\n      {...rest}\n    >\n      {isMode('outlined') && (\n        <View\n          pointerEvents=\"none\"\n          style={[\n            {\n              borderRadius: roundness,\n              borderColor,\n            },\n            styles.outline,\n          ]}\n        />\n      )}\n      <TouchableWithoutFeedback\n        delayPressIn={0}\n        disabled={!(onPress || onLongPress)}\n        onLongPress={onLongPress}\n        onPress={onPress}\n        onPressIn={onPress || onLongPress ? handlePressIn : undefined}\n        onPressOut={onPress || onLongPress ? handlePressOut : undefined}\n        testID={testID}\n        accessible={accessible}\n      >\n        <View style={styles.innerContainer}>\n          {React.Children.map(children, (child, index) =>\n            React.isValidElement(child)\n              ? React.cloneElement(child, {\n                  index,\n                  total,\n                  siblings,\n                })\n              : child\n          )}\n        </View>\n      </TouchableWithoutFeedback>\n    </Surface>\n  );\n};\n\n// @component ./CardContent.tsx\nCard.Content = CardContent;\n// @component ./CardActions.tsx\nCard.Actions = CardActions;\n// @component ./CardCover.tsx\nCard.Cover = CardCover;\n// @component ./CardTitle.tsx\nCard.Title = CardTitle;\n\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n  outline: {\n    borderWidth: 1,\n    position: 'absolute',\n    width: '100%',\n    height: '100%',\n    zIndex: 2,\n  },\n  resetElevation: {\n    elevation: 0,\n  },\n});\n\nexport default withTheme(Card);\n"]},"metadata":{},"sourceType":"module"}