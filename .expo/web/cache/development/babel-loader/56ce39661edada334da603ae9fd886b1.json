{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"theme\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport Text from \"../Typography/Text\";\nimport { useTheme } from \"../../core/theming\";\n\nvar ListSubheader = function ListSubheader(_ref) {\n  var style = _ref.style,\n    overrideTheme = _ref.theme,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useTheme(overrideTheme);\n  var textColor = theme.isV3 ? theme.colors.onSurfaceVariant : color(theme.colors.text).alpha(0.54).rgb().string();\n  var font = theme.isV3 ? theme.fonts.bodyMedium : theme.fonts.medium;\n  return React.createElement(Text, _extends({\n    variant: \"bodyMedium\",\n    numberOfLines: 1\n  }, rest, {\n    style: [styles.container, _objectSpread({\n      color: textColor\n    }, font), style]\n  }));\n};\nListSubheader.displayName = 'List.Subheader';\nvar styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 16,\n    paddingVertical: 13\n  }\n});\nexport default ListSubheader;","map":{"version":3,"sources":["ListSubheader.tsx"],"names":["React","color","Text","useTheme","ListSubheader","style","theme","overrideTheme","rest","textColor","isV3","colors","onSurfaceVariant","text","alpha","rgb","string","font","fonts","bodyMedium","medium","styles","container","displayName","create","paddingHorizontal","paddingVertical"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP;AACA,SAASC,QAAT;;AA2BA,IAAMC,aAAa,GAAG,SAAhBA,aAAa,CAAG,IAAA,EAAqD;EAApD,IAAEC,KAAF,GAAoD,IAAA,CAAlDA,KAAF;IAAgBE,aAAhB,GAAoD,IAAA,CAA3CD,KAAK;IAAoBE,IAAAA,4BAAkB,IAAA;EACzE,IAAMF,KAAK,GAAGH,QAAQ,CAACI,aAAD,CAAtB;EAEA,IAAME,SAAS,GAAGH,KAAK,CAACI,IAANJ,GACdA,KAAK,CAACK,MAANL,CAAaM,gBADCN,GAEdL,KAAK,CAACK,KAAK,CAACK,MAANL,CAAaO,IAAd,CAALZ,CAAyBa,KAAzBb,CAA+B,IAA/BA,CAAAA,CAAqCc,GAArCd,EAAAA,CAA2Ce,MAA3Cf,EAFJ;EAIA,IAAMgB,IAAI,GAAGX,KAAK,CAACI,IAANJ,GAAaA,KAAK,CAACY,KAANZ,CAAYa,UAAzBb,GAAsCA,KAAK,CAACY,KAANZ,CAAYc,MAA/D;EAEA,OACE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAA,QAAA,CAAA;IACE,OAAO,EAAC,YADV;IAEE,aAAa,EAAE;EAFjB,CAAA,EAGMZ,IAHN,EAAA;IAIE,KAAK,EAAE,CACLa,MAAM,CAACC,SADF;MAGHrB,KAAK,EAAEQ;IADT,GAEKQ,IAAAA,GAELZ,KANK;EAJT,CAAA,CAAA,CADF;AAeD,CAxBD;AA0BAD,aAAa,CAACmB,WAAdnB,GAA4B,gBAA5BA;AAEA,IAAMiB,MAAM,GAAG,UAAU,CAACG,MAAX,CAAkB;EAC/BF,SAAS,EAAE;IACTG,iBAAiB,EAAE,EADV;IAETC,eAAe,EAAE;EAFR;AADoB,CAAlB,CAAf;AAOA,eAAetB,aAAf","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, StyleProp, TextStyle } from 'react-native';\nimport color from 'color';\nimport Text from '../Typography/Text';\nimport { useTheme } from '../../core/theming';\nimport type { Theme } from '../../types';\n\nexport type Props = React.ComponentProps<typeof Text> & {\n  /**\n   * @optional\n   */\n  theme?: Theme;\n  /**\n   * Style that is passed to Text element.\n   */\n  style?: StyleProp<TextStyle>;\n};\n\n/**\n * A component used to display a header in lists.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => <List.Subheader>My List Title</List.Subheader>;\n *\n * export default MyComponent;\n * ```\n */\nconst ListSubheader = ({ style, theme: overrideTheme, ...rest }: Props) => {\n  const theme = useTheme(overrideTheme);\n\n  const textColor = theme.isV3\n    ? theme.colors.onSurfaceVariant\n    : color(theme.colors.text).alpha(0.54).rgb().string();\n\n  const font = theme.isV3 ? theme.fonts.bodyMedium : theme.fonts.medium;\n\n  return (\n    <Text\n      variant=\"bodyMedium\"\n      numberOfLines={1}\n      {...rest}\n      style={[\n        styles.container,\n        {\n          color: textColor,\n          ...font,\n        },\n        style,\n      ]}\n    />\n  );\n};\n\nListSubheader.displayName = 'List.Subheader';\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 16,\n    paddingVertical: 13,\n  },\n});\n\nexport default ListSubheader;\n"]},"metadata":{},"sourceType":"module"}