{"ast":null,"code":"import * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { withTheme } from \"../../core/theming\";\nimport { RadioButtonContext } from \"./RadioButtonGroup\";\nimport { handlePress, isChecked } from \"./utils\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport RadioButton from \"./RadioButton\";\nimport Text from \"../Typography/Text\";\nimport RadioButtonAndroid from \"./RadioButtonAndroid\";\nimport RadioButtonIOS from \"./RadioButtonIOS\";\n\nvar RadioButtonItem = function RadioButtonItem(_ref) {\n  var value = _ref.value,\n    label = _ref.label,\n    style = _ref.style,\n    labelStyle = _ref.labelStyle,\n    _onPress = _ref.onPress,\n    disabled = _ref.disabled,\n    color = _ref.color,\n    uncheckedColor = _ref.uncheckedColor,\n    status = _ref.status,\n    theme = _ref.theme,\n    _ref$accessibilityLab = _ref.accessibilityLabel,\n    accessibilityLabel = _ref$accessibilityLab === void 0 ? label : _ref$accessibilityLab,\n    testID = _ref.testID,\n    mode = _ref.mode,\n    _ref$position = _ref.position,\n    position = _ref$position === void 0 ? 'trailing' : _ref$position,\n    _ref$labelVariant = _ref.labelVariant,\n    labelVariant = _ref$labelVariant === void 0 ? 'bodyLarge' : _ref$labelVariant;\n  var radioButtonProps = {\n    value: value,\n    disabled: disabled,\n    status: status,\n    color: color,\n    uncheckedColor: uncheckedColor\n  };\n  var isLeading = position === 'leading';\n  var radioButton;\n  if (mode === 'android') {\n    radioButton = React.createElement(RadioButtonAndroid, radioButtonProps);\n  } else if (mode === 'ios') {\n    radioButton = React.createElement(RadioButtonIOS, radioButtonProps);\n  } else {\n    radioButton = React.createElement(RadioButton, radioButtonProps);\n  }\n  var textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  var disabledTextColor = theme.isV3 ? theme.colors.onSurfaceDisabled : theme.colors.disabled;\n  var textAlign = isLeading ? 'right' : 'left';\n  var computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign: textAlign\n  };\n  return React.createElement(RadioButtonContext.Consumer, null, function (context) {\n    var checked = isChecked({\n      contextValue: context === null || context === void 0 ? void 0 : context.value,\n      status: status,\n      value: value\n    }) === 'checked';\n    return React.createElement(TouchableRipple, {\n      onPress: function onPress() {\n        return handlePress({\n          onPress: _onPress,\n          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n          value: value\n        });\n      },\n      accessibilityLabel: accessibilityLabel,\n      accessibilityRole: \"radio\",\n      accessibilityState: {\n        checked: checked,\n        disabled: disabled\n      },\n      testID: testID,\n      disabled: disabled\n    }, React.createElement(View, {\n      style: [styles.container, style],\n      pointerEvents: \"none\"\n    }, isLeading && radioButton, React.createElement(Text, {\n      variant: labelVariant,\n      style: [styles.label, !theme.isV3 && styles.font, computedStyle, labelStyle]\n    }, label), !isLeading && radioButton));\n  });\n};\nRadioButtonItem.displayName = 'RadioButton.Item';\nexport default withTheme(RadioButtonItem);\n\nvar RadioButtonItemWithTheme = withTheme(RadioButtonItem);\n\nexport { RadioButtonItemWithTheme as RadioButtonItem };\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1\n  },\n  font: {\n    fontSize: 16\n  }\n});","map":{"version":3,"sources":["RadioButtonItem.tsx"],"names":["React","withTheme","RadioButtonContext","handlePress","isChecked","TouchableRipple","RadioButton","Text","RadioButtonAndroid","RadioButtonIOS","RadioButtonItem","value","label","style","labelStyle","onPress","disabled","color","uncheckedColor","status","theme","accessibilityLabel","testID","mode","position","labelVariant","radioButtonProps","isLeading","radioButton","textColor","isV3","colors","onSurface","text","disabledTextColor","onSurfaceDisabled","textAlign","computedStyle","context","checked","contextValue","onValueChange","styles","container","font","displayName","RadioButtonItemWithTheme","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","flexShrink","flexGrow","fontSize"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport RadioButton from './RadioButton';\nimport Text from '../Typography/Text';\nimport RadioButtonAndroid from './RadioButtonAndroid';\nimport RadioButtonIOS from './RadioButtonIOS';\nimport type { MD3TypescaleKey, Theme } from '../../types';\n\nexport type Props = {\n  /**\n   * Value of the radio button.\n   */\n  value: string;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Label text variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  labelVariant?: keyof typeof MD3TypescaleKey;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Whether `<RadioButton.Android />` or `<RadioButton.IOS />` should be used.\n   * Left undefined `<RadioButton />` will be used.\n   */\n  mode?: 'android' | 'ios';\n  /**\n   * Radio button control position.\n   */\n  position?: 'leading' | 'trailing';\n};\n\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-item.ios.png\" />\n *     <figcaption>Pressed</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { RadioButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('first');\n *\n *   return (\n *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>\n *       <RadioButton.Item label=\"First item\" value=\"first\" />\n *       <RadioButton.Item label=\"Second item\" value=\"second\" />\n *     </RadioButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst RadioButtonItem = ({\n  value,\n  label,\n  style,\n  labelStyle,\n  onPress,\n  disabled,\n  color,\n  uncheckedColor,\n  status,\n  theme,\n  accessibilityLabel = label,\n  testID,\n  mode,\n  position = 'trailing',\n  labelVariant = 'bodyLarge',\n}: Props) => {\n  const radioButtonProps = { value, disabled, status, color, uncheckedColor };\n  const isLeading = position === 'leading';\n  let radioButton: any;\n\n  if (mode === 'android') {\n    radioButton = <RadioButtonAndroid {...radioButtonProps} />;\n  } else if (mode === 'ios') {\n    radioButton = <RadioButtonIOS {...radioButtonProps} />;\n  } else {\n    radioButton = <RadioButton {...radioButtonProps} />;\n  }\n\n  const textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  const disabledTextColor = theme.isV3\n    ? theme.colors.onSurfaceDisabled\n    : theme.colors.disabled;\n  const textAlign = isLeading ? 'right' : 'left';\n\n  const computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign,\n  } as TextStyle;\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n        return (\n          <TouchableRipple\n            onPress={() =>\n              handlePress({\n                onPress: onPress,\n                onValueChange: context?.onValueChange,\n                value,\n              })\n            }\n            accessibilityLabel={accessibilityLabel}\n            accessibilityRole=\"radio\"\n            accessibilityState={{\n              checked,\n              disabled,\n            }}\n            testID={testID}\n            disabled={disabled}\n          >\n            <View style={[styles.container, style]} pointerEvents=\"none\">\n              {isLeading && radioButton}\n              <Text\n                variant={labelVariant}\n                style={[\n                  styles.label,\n                  !theme.isV3 && styles.font,\n                  computedStyle,\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n              {!isLeading && radioButton}\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonItem.displayName = 'RadioButton.Item';\n\nexport default withTheme(RadioButtonItem);\n\n// @component-docs ignore-next-line\nconst RadioButtonItemWithTheme = withTheme(RadioButtonItem);\n// @component-docs ignore-next-line\nexport { RadioButtonItemWithTheme as RadioButtonItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n  font: {\n    fontSize: 16,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}