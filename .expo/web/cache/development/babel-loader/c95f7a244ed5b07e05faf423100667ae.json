{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"iconColor\", \"containerColor\", \"size\", \"accessibilityLabel\", \"disabled\", \"onPress\", \"selected\", \"animated\", \"mode\", \"theme\", \"style\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport Icon from \"../Icon\";\nimport CrossFadeIcon from \"../CrossFadeIcon\";\nimport { withTheme } from \"../../core/theming\";\nimport { getIconButtonColor } from \"./utils\";\nimport Surface from \"../Surface\";\nvar PADDING = 8;\n\nvar IconButton = function IconButton(_ref) {\n  var icon = _ref.icon,\n    customIconColor = _ref.iconColor,\n    customContainerColor = _ref.containerColor,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? 24 : _ref$size,\n    accessibilityLabel = _ref.accessibilityLabel,\n    disabled = _ref.disabled,\n    onPress = _ref.onPress,\n    _ref$selected = _ref.selected,\n    selected = _ref$selected === void 0 ? false : _ref$selected,\n    _ref$animated = _ref.animated,\n    animated = _ref$animated === void 0 ? false : _ref$animated,\n    mode = _ref.mode,\n    theme = _ref.theme,\n    style = _ref.style,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var isV3 = theme.isV3;\n  var IconComponent = animated ? CrossFadeIcon : Icon;\n  var _getIconButtonColor = getIconButtonColor({\n      theme: theme,\n      disabled: disabled,\n      selected: selected,\n      mode: mode,\n      customIconColor: customIconColor,\n      customContainerColor: customContainerColor\n    }),\n    iconColor = _getIconButtonColor.iconColor,\n    rippleColor = _getIconButtonColor.rippleColor,\n    backgroundColor = _getIconButtonColor.backgroundColor,\n    borderColor = _getIconButtonColor.borderColor;\n  var buttonSize = isV3 ? size + 2 * PADDING : size * 1.5;\n  var borderStyles = {\n    borderWidth: isV3 && mode === 'outlined' && !selected ? 1 : 0,\n    borderRadius: buttonSize / 2,\n    borderColor: borderColor\n  };\n  return React.createElement(Surface, _extends({\n    style: [{\n      backgroundColor: backgroundColor,\n      width: buttonSize,\n      height: buttonSize\n    }, styles.container, borderStyles, !isV3 && disabled && styles.disabled, style]\n  }, isV3 && {\n    elevation: 0\n  }), React.createElement(TouchableRipple, _extends({\n    borderless: true,\n    centered: true,\n    onPress: onPress,\n    rippleColor: rippleColor,\n    accessibilityLabel: accessibilityLabel,\n    style: styles.touchable,\n\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      disabled: disabled\n    },\n    disabled: disabled,\n    hitSlop: TouchableRipple.supported ? {\n      top: 10,\n      left: 10,\n      bottom: 10,\n      right: 10\n    } : {\n      top: 6,\n      left: 6,\n      bottom: 6,\n      right: 6\n    }\n  }, rest), React.createElement(IconComponent, {\n    color: iconColor,\n    source: icon,\n    size: size\n  })));\n};\nvar styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n    margin: 6,\n    elevation: 0\n  },\n  touchable: {\n    flexGrow: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  disabled: {\n    opacity: 0.32\n  }\n});\nexport default withTheme(IconButton);","map":{"version":3,"sources":["IconButton.tsx"],"names":["React","TouchableRipple","Icon","CrossFadeIcon","withTheme","getIconButtonColor","Surface","PADDING","IconButton","icon","iconColor","customIconColor","containerColor","customContainerColor","size","accessibilityLabel","disabled","onPress","selected","animated","mode","theme","style","rest","isV3","IconComponent","rippleColor","backgroundColor","borderColor","buttonSize","borderStyles","borderWidth","borderRadius","width","height","styles","container","elevation","touchable","supported","top","left","bottom","right","create","overflow","margin","flexGrow","justifyContent","alignItems","opacity"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n  TouchableWithoutFeedback,\n} from 'react-native';\n\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Icon, { IconSource } from '../Icon';\nimport CrossFadeIcon from '../CrossFadeIcon';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren, Theme } from '../../types';\nimport { getIconButtonColor } from './utils';\nimport Surface from '../Surface';\n\nconst PADDING = 8;\n\ntype IconButtonMode = 'outlined' | 'contained' | 'contained-tonal';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Icon to display.\n   */\n  icon: IconSource;\n  /**\n   * @supported Available in v5.x\n   * Mode of the icon button. By default there is no specified mode - only pressable icon will be rendered.\n   */\n  mode?: IconButtonMode;\n  /**\n   * @renamed Renamed from 'color' to 'iconColor' in v5.x\n   * Color of the icon.\n   */\n  iconColor?: string;\n  /**\n   * @supported Available in v5.x\n   * Background color of the icon container.\n   */\n  containerColor?: string;\n  /**\n   * @supported Available in v5.x\n   * Whether icon button is selected. A selected button receives alternative combination of icon and container colors.\n   */\n  selected?: boolean;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<TouchableWithoutFeedback>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * An icon button is a button which displays only an icon without a label.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/icon-button-1.png\" />\n *     <figcaption>Default icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/icon-button-2.png\" />\n *     <figcaption>Contained icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/icon-button-3.png\" />\n *     <figcaption>Contained-tonal icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/icon-button-4.png\" />\n *     <figcaption>Outlined icon button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { IconButton, MD3Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <IconButton\n *     icon=\"camera\"\n *     iconColor={MD3Colors.error50}\n *     size={20}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst IconButton = ({\n  icon,\n  iconColor: customIconColor,\n  containerColor: customContainerColor,\n  size = 24,\n  accessibilityLabel,\n  disabled,\n  onPress,\n  selected = false,\n  animated = false,\n  mode,\n  theme,\n  style,\n  ...rest\n}: Props) => {\n  const { isV3 } = theme;\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n\n  const { iconColor, rippleColor, backgroundColor, borderColor } =\n    getIconButtonColor({\n      theme,\n      disabled,\n      selected,\n      mode,\n      customIconColor,\n      customContainerColor,\n    });\n\n  const buttonSize = isV3 ? size + 2 * PADDING : size * 1.5;\n\n  const borderStyles = {\n    borderWidth: isV3 && mode === 'outlined' && !selected ? 1 : 0,\n    borderRadius: buttonSize / 2,\n    borderColor,\n  };\n\n  return (\n    <Surface\n      style={\n        [\n          {\n            backgroundColor,\n            width: buttonSize,\n            height: buttonSize,\n          },\n          styles.container,\n          borderStyles,\n          !isV3 && disabled && styles.disabled,\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n      {...(isV3 && { elevation: 0 })}\n    >\n      <TouchableRipple\n        borderless\n        centered\n        onPress={onPress}\n        rippleColor={rippleColor}\n        accessibilityLabel={accessibilityLabel}\n        style={styles.touchable}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled }}\n        disabled={disabled}\n        hitSlop={\n          TouchableRipple.supported\n            ? { top: 10, left: 10, bottom: 10, right: 10 }\n            : { top: 6, left: 6, bottom: 6, right: 6 }\n        }\n        {...rest}\n      >\n        <IconComponent color={iconColor} source={icon} size={size} />\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n    margin: 6,\n    elevation: 0,\n  },\n  touchable: {\n    flexGrow: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  disabled: {\n    opacity: 0.32,\n  },\n});\n\nexport default withTheme(IconButton);\n"]},"metadata":{},"sourceType":"module"}