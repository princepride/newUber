{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"icon\", \"onPress\", \"forceTextInputFocus\", \"color\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport IconButton from \"../../IconButton/IconButton\";\nimport { useTheme } from \"../../../core/theming\";\nimport { getConstants } from \"../helpers\";\nimport { ICON_SIZE } from \"../constants\";\nvar StyleContext = React.createContext({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: function forceFocus() {},\n  testID: ''\n});\nvar IconAdornment = function IconAdornment(_ref) {\n  var icon = _ref.icon,\n    topPosition = _ref.topPosition,\n    side = _ref.side,\n    isTextInputFocused = _ref.isTextInputFocused,\n    forceFocus = _ref.forceFocus,\n    testID = _ref.testID;\n  var _useTheme = useTheme(),\n    isV3 = _useTheme.isV3;\n  var _getConstants = getConstants(isV3),\n    ICON_OFFSET = _getConstants.ICON_OFFSET;\n  var style = _defineProperty({\n    top: topPosition\n  }, side, ICON_OFFSET);\n  var contextState = {\n    style: style,\n    isTextInputFocused: isTextInputFocused,\n    forceFocus: forceFocus,\n    testID: testID\n  };\n  return React.createElement(StyleContext.Provider, {\n    value: contextState\n  }, icon);\n};\n\nvar TextInputIcon = function TextInputIcon(_ref2) {\n  var icon = _ref2.icon,\n    onPress = _ref2.onPress,\n    forceTextInputFocus = _ref2.forceTextInputFocus,\n    color = _ref2.color,\n    rest = _objectWithoutProperties(_ref2, _excluded);\n  var _React$useContext = React.useContext(StyleContext),\n    style = _React$useContext.style,\n    isTextInputFocused = _React$useContext.isTextInputFocused,\n    forceFocus = _React$useContext.forceFocus,\n    testID = _React$useContext.testID;\n  var onPressWithFocusControl = React.useCallback(function () {\n    if (forceTextInputFocus && !isTextInputFocused) {\n      forceFocus();\n    }\n    onPress === null || onPress === void 0 ? void 0 : onPress();\n  }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);\n  var theme = useTheme();\n  var iconColor = color;\n  if (theme.isV3) {\n    if (rest.disabled) {\n      iconColor = theme.colors.onSurface;\n    }\n    iconColor = theme.colors.onSurfaceVariant;\n  } else {\n    iconColor = theme.colors.text;\n  }\n  return React.createElement(View, {\n    style: [styles.container, style]\n  }, React.createElement(IconButton, _extends({\n    icon: icon,\n    style: styles.iconButton,\n    size: ICON_SIZE,\n    onPress: onPressWithFocusControl,\n    iconColor: typeof color === 'function' ? color(isTextInputFocused) : iconColor,\n    testID: testID\n  }, rest)));\n};\nTextInputIcon.displayName = 'TextInput.Icon';\nTextInputIcon.defaultProps = {\n  forceTextInputFocus: true\n};\nvar styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  iconButton: {\n    margin: 0\n  }\n});\nexport default TextInputIcon;\n\nexport { IconAdornment };","map":{"version":3,"sources":["TextInputIcon.tsx"],"names":["React","IconButton","useTheme","getConstants","ICON_SIZE","StyleContext","createContext","style","isTextInputFocused","forceFocus","testID","IconAdornment","icon","topPosition","side","isV3","ICON_OFFSET","top","contextState","TextInputIcon","onPress","forceTextInputFocus","color","rest","useContext","onPressWithFocusControl","useCallback","theme","iconColor","disabled","colors","onSurface","onSurfaceVariant","text","styles","container","iconButton","displayName","defaultProps","create","position","width","height","justifyContent","alignItems","margin"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\n\nimport IconButton from '../../IconButton/IconButton';\nimport type { $Omit, Theme } from '../../../types';\nimport type { IconSource } from '../../Icon';\nimport { useTheme } from '../../../core/theming';\nimport { getConstants } from '../helpers';\nimport { ICON_SIZE } from '../constants';\n\nexport type Props = $Omit<\n  React.ComponentProps<typeof IconButton>,\n  'icon' | 'theme' | 'color'\n> & {\n  /**\n   * @renamed Renamed from 'name' to 'icon` in v5.x\n   * Icon to show.\n   */\n  icon: IconSource;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Whether the TextInput will focus after onPress.\n   */\n  forceTextInputFocus?: boolean;\n  /**\n   * Color of the icon or a function receiving a boolean indicating whether the TextInput is focused and returning the color.\n   */\n  color?: ((isTextInputFocused: boolean) => string | undefined) | string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme?: Theme;\n};\n\ntype StyleContextType = {\n  style: StyleProp<ViewStyle>;\n  isTextInputFocused: boolean;\n  forceFocus: () => void;\n  testID: string;\n};\n\nconst StyleContext = React.createContext<StyleContextType>({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: () => {},\n  testID: '',\n});\n\nconst IconAdornment: React.FunctionComponent<\n  {\n    testID: string;\n    icon: React.ReactNode;\n    topPosition: number;\n    side: 'left' | 'right';\n  } & Omit<StyleContextType, 'style'>\n> = ({ icon, topPosition, side, isTextInputFocused, forceFocus, testID }) => {\n  const { isV3 } = useTheme();\n  const { ICON_OFFSET } = getConstants(isV3);\n\n  const style = {\n    top: topPosition,\n    [side]: ICON_OFFSET,\n  };\n  const contextState = { style, isTextInputFocused, forceFocus, testID };\n\n  return (\n    <StyleContext.Provider value={contextState}>{icon}</StyleContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing icon in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/textinput-flat.icon.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       label=\"Password\"\n *       secureTextEntry\n *       right={<TextInput.Icon icon=\"eye\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputIcon = ({\n  icon,\n  onPress,\n  forceTextInputFocus,\n  color,\n  ...rest\n}: Props) => {\n  const { style, isTextInputFocused, forceFocus, testID } =\n    React.useContext(StyleContext);\n\n  const onPressWithFocusControl = React.useCallback(() => {\n    if (forceTextInputFocus && !isTextInputFocused) {\n      forceFocus();\n    }\n    onPress?.();\n  }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);\n\n  const theme = useTheme();\n\n  let iconColor = color;\n\n  if (theme.isV3) {\n    if (rest.disabled) {\n      iconColor = theme.colors.onSurface;\n    }\n    iconColor = theme.colors.onSurfaceVariant;\n  } else {\n    iconColor = theme.colors.text;\n  }\n\n  return (\n    <View style={[styles.container, style]}>\n      <IconButton\n        icon={icon}\n        style={styles.iconButton}\n        size={ICON_SIZE}\n        onPress={onPressWithFocusControl}\n        iconColor={\n          typeof color === 'function' ? color(isTextInputFocused) : iconColor\n        }\n        testID={testID}\n        {...rest}\n      />\n    </View>\n  );\n};\nTextInputIcon.displayName = 'TextInput.Icon';\n\nTextInputIcon.defaultProps = {\n  forceTextInputFocus: true,\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  iconButton: {\n    margin: 0,\n  },\n});\n\nexport default TextInputIcon;\n\n// @component-docs ignore-next-line\nexport { IconAdornment };\n"]},"metadata":{},"sourceType":"module"}