{"ast":null,"code":"import Platform from \"react-native-web/dist/exports/Platform\";\nimport setColor from 'color';\nimport { grey400, grey800, grey50, grey700, white, black } from \"../../styles/themes/v2/colors\";\nvar getCheckedColor = function getCheckedColor(_ref) {\n  var theme = _ref.theme,\n    color = _ref.color;\n  if (color) {\n    return color;\n  }\n  if (theme.isV3) {\n    return theme.colors.primary;\n  }\n  return theme.colors.accent;\n};\nvar getThumbTintColor = function getThumbTintColor(_ref2) {\n  var theme = _ref2.theme,\n    disabled = _ref2.disabled,\n    value = _ref2.value,\n    checkedColor = _ref2.checkedColor;\n  var isIOS = Platform.OS === 'ios';\n  if (isIOS) {\n    return undefined;\n  }\n  if (disabled) {\n    if (theme.dark) {\n      return grey800;\n    }\n    return grey400;\n  }\n  if (value) {\n    return checkedColor;\n  }\n  if (theme.dark) {\n    return grey400;\n  }\n  return grey50;\n};\nvar getOnTintColor = function getOnTintColor(_ref3) {\n  var theme = _ref3.theme,\n    disabled = _ref3.disabled,\n    value = _ref3.value,\n    checkedColor = _ref3.checkedColor;\n  var isIOS = Platform.OS === 'ios';\n  if (isIOS) {\n    return checkedColor;\n  }\n  if (disabled) {\n    if (theme.dark) {\n      if (theme.isV3) {\n        return setColor(white).alpha(0.06).rgb().string();\n      }\n      return setColor(white).alpha(0.1).rgb().string();\n    }\n    return setColor(black).alpha(0.12).rgb().string();\n  }\n  if (value) {\n    return setColor(checkedColor).alpha(0.5).rgb().string();\n  }\n  if (theme.dark) {\n    return grey700;\n  }\n  return 'rgb(178, 175, 177)';\n};\nexport var getSwitchColor = function getSwitchColor(_ref4) {\n  var theme = _ref4.theme,\n    disabled = _ref4.disabled,\n    value = _ref4.value,\n    color = _ref4.color;\n  var checkedColor = getCheckedColor({\n    theme: theme,\n    color: color\n  });\n  return {\n    onTintColor: getOnTintColor({\n      theme: theme,\n      disabled: disabled,\n      value: value,\n      checkedColor: checkedColor\n    }),\n    thumbTintColor: getThumbTintColor({\n      theme: theme,\n      disabled: disabled,\n      value: value,\n      checkedColor: checkedColor\n    }),\n    checkedColor: checkedColor\n  };\n};","map":{"version":3,"sources":["utils.ts"],"names":["setColor","grey400","grey800","grey50","grey700","white","black","getCheckedColor","theme","color","isV3","colors","primary","accent","getThumbTintColor","disabled","value","checkedColor","isIOS","Platform","OS","undefined","dark","getOnTintColor","alpha","rgb","string","getSwitchColor","onTintColor","thumbTintColor"],"mappings":"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","sourcesContent":["import { Platform } from 'react-native';\nimport setColor from 'color';\n\nimport {\n  grey400,\n  grey800,\n  grey50,\n  grey700,\n  white,\n  black,\n} from '../../styles/themes/v2/colors';\nimport type { Theme } from '../../types';\n\ntype BaseProps = {\n  theme: Theme;\n  disabled?: boolean;\n  value?: boolean;\n};\n\nconst getCheckedColor = ({\n  theme,\n  color,\n}: {\n  theme: Theme;\n  color?: string;\n}) => {\n  if (color) {\n    return color;\n  }\n\n  if (theme.isV3) {\n    return theme.colors.primary;\n  }\n\n  return theme.colors.accent;\n};\n\nconst getThumbTintColor = ({\n  theme,\n  disabled,\n  value,\n  checkedColor,\n}: BaseProps & { checkedColor: string }) => {\n  const isIOS = Platform.OS === 'ios';\n\n  if (isIOS) {\n    return undefined;\n  }\n\n  if (disabled) {\n    if (theme.dark) {\n      return grey800;\n    }\n    return grey400;\n  }\n\n  if (value) {\n    return checkedColor;\n  }\n\n  if (theme.dark) {\n    return grey400;\n  }\n  return grey50;\n};\n\nconst getOnTintColor = ({\n  theme,\n  disabled,\n  value,\n  checkedColor,\n}: BaseProps & { checkedColor: string }) => {\n  const isIOS = Platform.OS === 'ios';\n\n  if (isIOS) {\n    return checkedColor;\n  }\n\n  if (disabled) {\n    if (theme.dark) {\n      if (theme.isV3) {\n        return setColor(white).alpha(0.06).rgb().string();\n      }\n      return setColor(white).alpha(0.1).rgb().string();\n    }\n    return setColor(black).alpha(0.12).rgb().string();\n  }\n\n  if (value) {\n    return setColor(checkedColor).alpha(0.5).rgb().string();\n  }\n\n  if (theme.dark) {\n    return grey700;\n  }\n  return 'rgb(178, 175, 177)';\n};\n\nexport const getSwitchColor = ({\n  theme,\n  disabled,\n  value,\n  color,\n}: BaseProps & { color?: string }) => {\n  const checkedColor = getCheckedColor({ theme, color });\n\n  return {\n    onTintColor: getOnTintColor({ theme, disabled, value, checkedColor }),\n    thumbTintColor: getThumbTintColor({ theme, disabled, value, checkedColor }),\n    checkedColor,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}