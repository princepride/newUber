{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"status\", \"theme\", \"disabled\", \"onPress\", \"testID\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport MaterialCommunityIcon from \"../MaterialCommunityIcon\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { withTheme } from \"../../core/theming\";\nimport { getAndroidSelectionControlColor } from \"./utils\";\nvar ANIMATION_DURATION = 100;\n\nvar CheckboxAndroid = function CheckboxAndroid(_ref) {\n  var status = _ref.status,\n    theme = _ref.theme,\n    disabled = _ref.disabled,\n    onPress = _ref.onPress,\n    testID = _ref.testID,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _React$useRef = React.useRef(new Animated.Value(1)),\n    scaleAnim = _React$useRef.current;\n  var isFirstRendering = React.useRef(true);\n  var scale = theme.animation.scale;\n  React.useEffect(function () {\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n    var checked = status === 'checked';\n    Animated.sequence([Animated.timing(scaleAnim, {\n      toValue: 0.85,\n      duration: checked ? ANIMATION_DURATION * scale : 0,\n      useNativeDriver: false\n    }), Animated.timing(scaleAnim, {\n      toValue: 1,\n      duration: checked ? ANIMATION_DURATION * scale : ANIMATION_DURATION * scale * 1.75,\n      useNativeDriver: false\n    })]).start();\n  }, [status, scaleAnim, scale]);\n  var checked = status === 'checked';\n  var indeterminate = status === 'indeterminate';\n  var _getAndroidSelectionC = getAndroidSelectionControlColor({\n      theme: theme,\n      disabled: disabled,\n      checked: checked,\n      customColor: rest.color,\n      customUncheckedColor: rest.uncheckedColor\n    }),\n    rippleColor = _getAndroidSelectionC.rippleColor,\n    selectionControlColor = _getAndroidSelectionC.selectionControlColor;\n  var borderWidth = scaleAnim.interpolate({\n    inputRange: [0.8, 1],\n    outputRange: [7, 0]\n  });\n  var icon = indeterminate ? 'minus-box' : checked ? 'checkbox-marked' : 'checkbox-blank-outline';\n  return React.createElement(TouchableRipple, _extends({}, rest, {\n    borderless: true,\n    rippleColor: rippleColor,\n    onPress: onPress,\n    disabled: disabled,\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      disabled: disabled,\n      checked: checked\n    },\n    accessibilityLiveRegion: \"polite\",\n    style: styles.container,\n    testID: testID\n  }), React.createElement(Animated.View, {\n    style: {\n      transform: [{\n        scale: scaleAnim\n      }]\n    }\n  }, React.createElement(MaterialCommunityIcon, {\n    allowFontScaling: false,\n    name: icon,\n    size: 24,\n    color: selectionControlColor,\n    direction: \"ltr\"\n  }), React.createElement(View, {\n    style: [StyleSheet.absoluteFill, styles.fillContainer]\n  }, React.createElement(Animated.View, {\n    style: [styles.fill, {\n      borderColor: selectionControlColor\n    }, {\n      borderWidth: borderWidth\n    }]\n  }))));\n};\nCheckboxAndroid.displayName = 'Checkbox.Android';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  fill: {\n    height: 14,\n    width: 14\n  }\n});\nexport default withTheme(CheckboxAndroid);\n\nvar CheckboxAndroidWithTheme = withTheme(CheckboxAndroid);\n\nexport { CheckboxAndroidWithTheme as CheckboxAndroid };","map":{"version":3,"sources":["CheckboxAndroid.tsx"],"names":["React","MaterialCommunityIcon","TouchableRipple","withTheme","getAndroidSelectionControlColor","ANIMATION_DURATION","CheckboxAndroid","status","theme","disabled","onPress","testID","rest","current","scaleAnim","useRef","Animated","Value","isFirstRendering","animation","scale","useEffect","checked","sequence","timing","toValue","duration","useNativeDriver","start","indeterminate","rippleColor","selectionControlColor","customColor","color","customUncheckedColor","uncheckedColor","borderWidth","interpolate","inputRange","outputRange","icon","styles","container","transform","StyleSheet","absoluteFill","fillContainer","fill","borderColor","displayName","create","borderRadius","width","height","padding","alignItems","justifyContent","CheckboxAndroidWithTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren, Theme } from '../../types';\nimport { getAndroidSelectionControlColor } from './utils';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n// From https://material.io/design/motion/speed.html#duration\nconst ANIMATION_DURATION = 100;\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst CheckboxAndroid = ({\n  status,\n  theme,\n  disabled,\n  onPress,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: scaleAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(1)\n  );\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const {\n    animation: { scale },\n  } = theme;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    const checked = status === 'checked';\n\n    Animated.sequence([\n      Animated.timing(scaleAnim, {\n        toValue: 0.85,\n        duration: checked ? ANIMATION_DURATION * scale : 0,\n        useNativeDriver: false,\n      }),\n      Animated.timing(scaleAnim, {\n        toValue: 1,\n        duration: checked\n          ? ANIMATION_DURATION * scale\n          : ANIMATION_DURATION * scale * 1.75,\n        useNativeDriver: false,\n      }),\n    ]).start();\n  }, [status, scaleAnim, scale]);\n\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n\n  const { rippleColor, selectionControlColor } =\n    getAndroidSelectionControlColor({\n      theme,\n      disabled,\n      checked,\n      customColor: rest.color,\n      customUncheckedColor: rest.uncheckedColor,\n    });\n\n  const borderWidth = scaleAnim.interpolate({\n    inputRange: [0.8, 1],\n    outputRange: [7, 0],\n  });\n\n  const icon = indeterminate\n    ? 'minus-box'\n    : checked\n    ? 'checkbox-marked'\n    : 'checkbox-blank-outline';\n\n  return (\n    <TouchableRipple\n      {...rest}\n      borderless\n      rippleColor={rippleColor}\n      onPress={onPress}\n      disabled={disabled}\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{ disabled, checked }}\n      accessibilityLiveRegion=\"polite\"\n      style={styles.container}\n      testID={testID}\n    >\n      <Animated.View style={{ transform: [{ scale: scaleAnim }] }}>\n        <MaterialCommunityIcon\n          allowFontScaling={false}\n          name={icon}\n          size={24}\n          color={selectionControlColor}\n          direction=\"ltr\"\n        />\n        <View style={[StyleSheet.absoluteFill, styles.fillContainer]}>\n          <Animated.View\n            style={[\n              styles.fill,\n              { borderColor: selectionControlColor },\n              { borderWidth },\n            ]}\n          />\n        </View>\n      </Animated.View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxAndroid.displayName = 'Checkbox.Android';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6,\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  fill: {\n    height: 14,\n    width: 14,\n  },\n});\n\nexport default withTheme(CheckboxAndroid);\n\n// @component-docs ignore-next-line\nconst CheckboxAndroidWithTheme = withTheme(CheckboxAndroid);\n// @component-docs ignore-next-line\nexport { CheckboxAndroidWithTheme as CheckboxAndroid };\n"]},"metadata":{},"sourceType":"module"}