{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"variant\", \"theme\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport NativeText from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { useTheme } from \"../../core/theming\";\nimport { MD3TypescaleKey } from \"../../types\";\n\nvar Text = function Text(_ref, ref) {\n  var style = _ref.style,\n    variant = _ref.variant,\n    initialTheme = _ref.theme,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var root = React.useRef(null);\n\n  var theme = useTheme(initialTheme);\n  var writingDirection = I18nManager.getConstants().isRTL ? 'rtl' : 'ltr';\n  React.useImperativeHandle(ref, function () {\n    return {\n      setNativeProps: function setNativeProps(args) {\n        var _root$current;\n        return (_root$current = root.current) === null || _root$current === void 0 ? void 0 : _root$current.setNativeProps(args);\n      }\n    };\n  });\n  if (theme.isV3 && variant) {\n    var stylesByVariant = Object.keys(MD3TypescaleKey).reduce(function (acc, key) {\n      var _theme$fonts$key = theme.fonts[key],\n        fontSize = _theme$fonts$key.fontSize,\n        fontWeight = _theme$fonts$key.fontWeight,\n        lineHeight = _theme$fonts$key.lineHeight,\n        letterSpacing = _theme$fonts$key.letterSpacing,\n        fontFamily = _theme$fonts$key.fontFamily;\n      return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, key, {\n        fontFamily: fontFamily,\n        fontSize: fontSize,\n        fontWeight: fontWeight,\n        lineHeight: lineHeight,\n        letterSpacing: letterSpacing,\n        color: theme.colors.onSurface\n      }));\n    }, {});\n    var styleForVariant = stylesByVariant[variant];\n    return React.createElement(NativeText, _extends({\n      ref: root,\n      style: [styleForVariant, styles.text, {\n        writingDirection: writingDirection\n      }, style]\n    }, rest));\n  } else {\n    var _theme$fonts, _theme$colors;\n    var font = !theme.isV3 ? (_theme$fonts = theme.fonts) === null || _theme$fonts === void 0 ? void 0 : _theme$fonts.regular : {};\n    var textStyle = _objectSpread(_objectSpread({}, font), {}, {\n      color: theme.isV3 ? (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.onSurface : theme.colors.text\n    });\n    return React.createElement(NativeText, _extends({}, rest, {\n      ref: root,\n      style: [styles.text, textStyle, {\n        writingDirection: writingDirection\n      }, style]\n    }));\n  }\n};\nvar styles = StyleSheet.create({\n  text: {\n    textAlign: 'left'\n  }\n});\nexport default React.forwardRef(Text);","map":{"version":3,"sources":["Text.tsx"],"names":["React","useTheme","MD3TypescaleKey","Text","style","variant","theme","initialTheme","rest","ref","root","useRef","writingDirection","I18nManager","getConstants","isRTL","useImperativeHandle","setNativeProps","args","current","isV3","stylesByVariant","keys","reduce","acc","key","fontSize","fontWeight","lineHeight","letterSpacing","fontFamily","fonts","color","colors","onSurface","styleForVariant","styles","text","font","regular","textStyle","create","textAlign","forwardRef"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Text as NativeText,\n  TextStyle,\n  StyleProp,\n  StyleSheet,\n  I18nManager,\n} from 'react-native';\nimport { useTheme } from '../../core/theming';\nimport { Font, MD3TypescaleKey, ThemeProp } from '../../types';\n\nexport type Props = React.ComponentProps<typeof NativeText> & {\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  variant?: keyof typeof MD3TypescaleKey;\n  children: React.ReactNode;\n  theme?: ThemeProp;\n  style?: StyleProp<TextStyle>;\n};\n\n// @component-group Typography\n\n/**\n * Typography component showing styles complied with passed `variant` prop and supported by the type system.\n *\n * <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/typography.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <>\n *     <Text variant=\"displayLarge\">Display Large</Text>\n *     <Text variant=\"displayMedium\">Display Medium</Text>\n *     <Text variant=\"displaySmall\">Display small</Text>\n *\n *     <Text variant=\"headlineLarge\">Headline Large</Text>\n *     <Text variant=\"headlineMedium\">Headline Medium</Text>\n *     <Text variant=\"headlineSmall\">Headline Small</Text>\n *\n *     <Text variant=\"titleLarge\">Title Large</Text>\n *     <Text variant=\"titleMedium\">Title Medium</Text>\n *     <Text variant=\"titleSmall\">Title Small</Text>\n *\n *     <Text variant=\"bodyLarge\">Body Large</Text>\n *     <Text variant=\"bodyMedium\">Body Medium</Text>\n *     <Text variant=\"bodySmall\">Body Small</Text>\n *\n *     <Text variant=\"labelLarge\">Label Large</Text>\n *     <Text variant=\"labelMedium\">Label Medium</Text>\n *     <Text variant=\"labelSmall\">Label Small</Text>\n *  </>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends Text props https://reactnative.dev/docs/text#props\n */\n\nconst Text: React.ForwardRefRenderFunction<{}, Props> = (\n  { style, variant, theme: initialTheme, ...rest }: Props,\n  ref\n) => {\n  const root = React.useRef<NativeText | null>(null);\n  // FIXME: destructure it in TS 4.6+\n  const theme = useTheme(initialTheme);\n  const writingDirection = I18nManager.getConstants().isRTL ? 'rtl' : 'ltr';\n\n  React.useImperativeHandle(ref, () => ({\n    setNativeProps: (args: Object) => root.current?.setNativeProps(args),\n  }));\n\n  if (theme.isV3 && variant) {\n    const stylesByVariant = Object.keys(MD3TypescaleKey).reduce(\n      (acc, key) => {\n        const { fontSize, fontWeight, lineHeight, letterSpacing, fontFamily } =\n          theme.fonts[key as keyof typeof MD3TypescaleKey];\n\n        return {\n          ...acc,\n          [key]: {\n            fontFamily,\n            fontSize,\n            fontWeight,\n            lineHeight,\n            letterSpacing,\n            color: theme.colors.onSurface,\n          },\n        };\n      },\n      {} as {\n        [key in MD3TypescaleKey]: {\n          fontSize: number;\n          fontWeight: Font['fontWeight'];\n          lineHeight: number;\n          letterSpacing: number;\n        };\n      }\n    );\n\n    const styleForVariant = stylesByVariant[variant];\n\n    return (\n      <NativeText\n        ref={root}\n        style={[styleForVariant, styles.text, { writingDirection }, style]}\n        {...rest}\n      />\n    );\n  } else {\n    const font = !theme.isV3 ? theme.fonts?.regular : {};\n    const textStyle = {\n      ...font,\n      color: theme.isV3 ? theme.colors?.onSurface : theme.colors.text,\n    };\n    return (\n      <NativeText\n        {...rest}\n        ref={root}\n        style={[styles.text, textStyle, { writingDirection }, style]}\n      />\n    );\n  }\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    textAlign: 'left',\n  },\n});\n\nexport default React.forwardRef(Text);\n"]},"metadata":{},"sourceType":"module"}