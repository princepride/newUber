{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport { black, white } from \"../../styles/themes/v2/colors\";\nvar DEFAULT_PADDING = 9;\nexport var getSegmentedButtonDensityPadding = function getSegmentedButtonDensityPadding(_ref) {\n  var density = _ref.density;\n  var padding = DEFAULT_PADDING;\n  switch (density) {\n    case 'small':\n      return padding - 2;\n    case 'medium':\n      return padding - 4;\n    case 'high':\n      return padding - 8;\n    default:\n      return padding;\n  }\n};\nexport var getDisabledSegmentedButtonStyle = function getDisabledSegmentedButtonStyle(_ref2) {\n  var _buttons$index, _buttons;\n  var theme = _ref2.theme,\n    index = _ref2.index,\n    buttons = _ref2.buttons;\n  var width = getSegmentedButtonBorderWidth({\n    theme: theme\n  });\n  var isDisabled = (_buttons$index = buttons[index]) === null || _buttons$index === void 0 ? void 0 : _buttons$index.disabled;\n  var isNextDisabled = (_buttons = buttons[index + 1]) === null || _buttons === void 0 ? void 0 : _buttons.disabled;\n  if (!isDisabled && isNextDisabled) {\n    return {\n      borderRightWidth: width\n    };\n  }\n  return {};\n};\nexport var getSegmentedButtonBorderRadius = function getSegmentedButtonBorderRadius(_ref3) {\n  var segment = _ref3.segment,\n    theme = _ref3.theme;\n  if (segment === 'first') {\n    return _objectSpread({\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0\n    }, theme.isV3 && {\n      borderRightWidth: 0\n    });\n  } else if (segment === 'last') {\n    return {\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0\n    };\n  } else {\n    return _objectSpread({\n      borderRadius: 0\n    }, theme.isV3 && {\n      borderRightWidth: 0\n    });\n  }\n};\nvar getSegmentedButtonBackgroundColor = function getSegmentedButtonBackgroundColor(_ref4) {\n  var checked = _ref4.checked,\n    theme = _ref4.theme;\n  if (checked) {\n    if (theme.isV3) {\n      return theme.colors.secondaryContainer;\n    } else {\n      return color(theme.colors.primary).alpha(0.12).rgb().string();\n    }\n  }\n  return 'transparent';\n};\nvar getSegmentedButtonBorderColor = function getSegmentedButtonBorderColor(_ref5) {\n  var theme = _ref5.theme,\n    disabled = _ref5.disabled,\n    checked = _ref5.checked;\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.surfaceDisabled;\n    }\n    return theme.colors.outline;\n  }\n  if (checked) {\n    return theme.colors.primary;\n  }\n  return color(theme.dark ? white : black).alpha(0.29).rgb().string();\n};\nvar getSegmentedButtonBorderWidth = function getSegmentedButtonBorderWidth(_ref6) {\n  var theme = _ref6.theme;\n  if (theme.isV3) {\n    return 1;\n  }\n  return StyleSheet.hairlineWidth;\n};\nvar getSegmentedButtonTextColor = function getSegmentedButtonTextColor(_ref7) {\n  var theme = _ref7.theme,\n    disabled = _ref7.disabled;\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n    return theme.colors.onSurface;\n  } else {\n    if (disabled) {\n      return theme.colors.disabled;\n    }\n    return theme.colors.primary;\n  }\n};\nexport var getSegmentedButtonColors = function getSegmentedButtonColors(_ref8) {\n  var theme = _ref8.theme,\n    disabled = _ref8.disabled,\n    checked = _ref8.checked;\n  var backgroundColor = getSegmentedButtonBackgroundColor({\n    theme: theme,\n    checked: checked\n  });\n  var borderColor = getSegmentedButtonBorderColor({\n    theme: theme,\n    disabled: disabled,\n    checked: checked\n  });\n  var textColor = getSegmentedButtonTextColor({\n    theme: theme,\n    disabled: disabled\n  });\n  var borderWidth = getSegmentedButtonBorderWidth({\n    theme: theme\n  });\n  return {\n    backgroundColor: backgroundColor,\n    borderColor: borderColor,\n    textColor: textColor,\n    borderWidth: borderWidth\n  };\n};","map":{"version":3,"sources":["utils.ts"],"names":["color","black","white","DEFAULT_PADDING","getSegmentedButtonDensityPadding","density","padding","getDisabledSegmentedButtonStyle","theme","index","buttons","width","getSegmentedButtonBorderWidth","isDisabled","disabled","isNextDisabled","borderRightWidth","getSegmentedButtonBorderRadius","segment","borderTopRightRadius","borderBottomRightRadius","isV3","borderTopLeftRadius","borderBottomLeftRadius","borderRadius","getSegmentedButtonBackgroundColor","checked","colors","secondaryContainer","primary","alpha","rgb","string","getSegmentedButtonBorderColor","surfaceDisabled","outline","dark","StyleSheet","hairlineWidth","getSegmentedButtonTextColor","onSurfaceDisabled","onSurface","getSegmentedButtonColors","backgroundColor","borderColor","textColor","borderWidth"],"mappings":"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","sourcesContent":["import { StyleSheet, ViewStyle } from 'react-native';\nimport color from 'color';\nimport type { Theme } from '../../types';\nimport { black, white } from '../../styles/themes/v2/colors';\n\ntype BaseProps = {\n  theme: Theme;\n  disabled?: boolean;\n  checked: boolean;\n};\n\nconst DEFAULT_PADDING = 9;\n\nexport const getSegmentedButtonDensityPadding = ({\n  density,\n}: {\n  density?: 'regular' | 'small' | 'medium' | 'high';\n}) => {\n  let padding = DEFAULT_PADDING;\n\n  switch (density) {\n    case 'small':\n      return padding - 2;\n    case 'medium':\n      return padding - 4;\n    case 'high':\n      return padding - 8;\n    default:\n      return padding;\n  }\n};\n\nexport const getDisabledSegmentedButtonStyle = ({\n  theme,\n  index,\n  buttons,\n}: {\n  theme: Theme;\n  buttons: { disabled?: boolean }[];\n  index: number;\n}): ViewStyle => {\n  const width = getSegmentedButtonBorderWidth({ theme });\n  const isDisabled = buttons[index]?.disabled;\n  const isNextDisabled = buttons[index + 1]?.disabled;\n\n  if (!isDisabled && isNextDisabled) {\n    return {\n      borderRightWidth: width,\n    };\n  }\n  return {};\n};\n\nexport const getSegmentedButtonBorderRadius = ({\n  segment,\n  theme,\n}: {\n  theme: Theme;\n  segment?: 'first' | 'last';\n}): ViewStyle => {\n  if (segment === 'first') {\n    return {\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0,\n      ...(theme.isV3 && { borderRightWidth: 0 }),\n    };\n  } else if (segment === 'last') {\n    return {\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0,\n    };\n  } else {\n    return {\n      borderRadius: 0,\n      ...(theme.isV3 && { borderRightWidth: 0 }),\n    };\n  }\n};\n\nconst getSegmentedButtonBackgroundColor = ({ checked, theme }: BaseProps) => {\n  if (checked) {\n    if (theme.isV3) {\n      return theme.colors.secondaryContainer;\n    } else {\n      return color(theme.colors.primary).alpha(0.12).rgb().string();\n    }\n  }\n  return 'transparent';\n};\n\nconst getSegmentedButtonBorderColor = ({\n  theme,\n  disabled,\n  checked,\n}: BaseProps) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.surfaceDisabled;\n    }\n    return theme.colors.outline;\n  }\n  if (checked) {\n    return theme.colors.primary;\n  }\n\n  return color(theme.dark ? white : black)\n    .alpha(0.29)\n    .rgb()\n    .string();\n};\n\nconst getSegmentedButtonBorderWidth = ({\n  theme,\n}: Omit<BaseProps, 'disabled' | 'checked'>) => {\n  if (theme.isV3) {\n    return 1;\n  }\n\n  return StyleSheet.hairlineWidth;\n};\n\nconst getSegmentedButtonTextColor = ({\n  theme,\n  disabled,\n}: Omit<BaseProps, 'checked'>) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n    return theme.colors.onSurface;\n  } else {\n    if (disabled) {\n      return theme.colors.disabled;\n    }\n    return theme.colors.primary;\n  }\n};\n\nexport const getSegmentedButtonColors = ({\n  theme,\n  disabled,\n  checked,\n}: BaseProps) => {\n  const backgroundColor = getSegmentedButtonBackgroundColor({\n    theme,\n    checked,\n  });\n  const borderColor = getSegmentedButtonBorderColor({\n    theme,\n    disabled,\n    checked,\n  });\n  const textColor = getSegmentedButtonTextColor({ theme, disabled });\n  const borderWidth = getSegmentedButtonBorderWidth({ theme });\n\n  return { backgroundColor, borderColor, textColor, borderWidth };\n};\n"]},"metadata":{},"sourceType":"module"}