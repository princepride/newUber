{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"onPress\", \"theme\", \"value\", \"status\", \"testID\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { RadioButtonContext } from \"./RadioButtonGroup\";\nimport { handlePress, isChecked } from \"./utils\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { withTheme } from \"../../core/theming\";\nimport { getAndroidSelectionControlColor } from \"../Checkbox/utils\";\nvar BORDER_WIDTH = 2;\n\nvar RadioButtonAndroid = function RadioButtonAndroid(_ref) {\n  var disabled = _ref.disabled,\n      onPress = _ref.onPress,\n      theme = _ref.theme,\n      value = _ref.value,\n      status = _ref.status,\n      testID = _ref.testID,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useRef = React.useRef(new Animated.Value(BORDER_WIDTH)),\n      borderAnim = _React$useRef.current;\n\n  var _React$useRef2 = React.useRef(new Animated.Value(1)),\n      radioAnim = _React$useRef2.current;\n\n  var isFirstRendering = React.useRef(true);\n  var scale = theme.animation.scale;\n  React.useEffect(function () {\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    if (status === 'checked') {\n      radioAnim.setValue(1.2);\n      Animated.timing(radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      borderAnim.setValue(10);\n      Animated.timing(borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n        useNativeDriver: false\n      }).start();\n    }\n  }, [status, borderAnim, radioAnim, scale]);\n  return React.createElement(RadioButtonContext.Consumer, null, function (context) {\n    var checked = isChecked({\n      contextValue: context === null || context === void 0 ? void 0 : context.value,\n      status: status,\n      value: value\n    }) === 'checked';\n\n    var _getAndroidSelectionC = getAndroidSelectionControlColor({\n      theme: theme,\n      disabled: disabled,\n      checked: checked,\n      customColor: rest.color,\n      customUncheckedColor: rest.uncheckedColor\n    }),\n        rippleColor = _getAndroidSelectionC.rippleColor,\n        selectionControlColor = _getAndroidSelectionC.selectionControlColor;\n\n    return React.createElement(TouchableRipple, _extends({}, rest, {\n      borderless: true,\n      rippleColor: rippleColor,\n      onPress: disabled ? undefined : function () {\n        handlePress({\n          onPress: onPress,\n          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n          value: value\n        });\n      },\n      accessibilityRole: \"radio\",\n      accessibilityState: {\n        disabled: disabled,\n        checked: checked\n      },\n      accessibilityLiveRegion: \"polite\",\n      style: styles.container,\n      testID: testID\n    }), React.createElement(Animated.View, {\n      style: [styles.radio, {\n        borderColor: selectionControlColor,\n        borderWidth: borderAnim\n      }]\n    }, checked ? React.createElement(View, {\n      style: [StyleSheet.absoluteFill, styles.radioContainer]\n    }, React.createElement(Animated.View, {\n      style: [styles.dot, {\n        backgroundColor: selectionControlColor,\n        transform: [{\n          scale: radioAnim\n        }]\n      }]\n    })) : null));\n  });\n};\n\nRadioButtonAndroid.displayName = 'RadioButton.Android';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5\n  }\n});\nexport default withTheme(RadioButtonAndroid);\nvar RadioButtonAndroidWithTheme = withTheme(RadioButtonAndroid);\nexport { RadioButtonAndroidWithTheme as RadioButtonAndroid };","map":{"version":3,"mappings":"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","names":["React","RadioButtonContext","handlePress","isChecked","TouchableRipple","withTheme","getAndroidSelectionControlColor","BORDER_WIDTH","RadioButtonAndroid","disabled","onPress","theme","value","status","testID","rest","useRef","Animated","Value","borderAnim","current","radioAnim","isFirstRendering","scale","animation","useEffect","setValue","timing","toValue","duration","useNativeDriver","start","Consumer","context","checked","contextValue","customColor","color","customUncheckedColor","uncheckedColor","rippleColor","selectionControlColor","borderless","undefined","onValueChange","accessibilityRole","accessibilityState","accessibilityLiveRegion","style","styles","container","View","radio","borderColor","borderWidth","StyleSheet","absoluteFill","radioContainer","dot","backgroundColor","transform","displayName","create","borderRadius","alignItems","justifyContent","height","width","margin","RadioButtonAndroidWithTheme"],"sources":["RadioButtonAndroid.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren, Theme } from '../../types';\nimport { getAndroidSelectionControlColor } from '../Checkbox/utils';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (param?: any) => void;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\nconst BORDER_WIDTH = 2;\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonAndroid = ({\n  disabled,\n  onPress,\n  theme,\n  value,\n  status,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: borderAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(BORDER_WIDTH)\n  );\n\n  const { current: radioAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(1)\n  );\n\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    if (status === 'checked') {\n      radioAnim.setValue(1.2);\n\n      Animated.timing(radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      borderAnim.setValue(10);\n\n      Animated.timing(borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n        useNativeDriver: false,\n      }).start();\n    }\n  }, [status, borderAnim, radioAnim, scale]);\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        const { rippleColor, selectionControlColor } =\n          getAndroidSelectionControlColor({\n            theme,\n            disabled,\n            checked,\n            customColor: rest.color,\n            customUncheckedColor: rest.uncheckedColor,\n          });\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : () => {\n                    handlePress({\n                      onPress,\n                      onValueChange: context?.onValueChange,\n                      value,\n                    });\n                  }\n            }\n            accessibilityRole=\"radio\"\n            accessibilityState={{ disabled, checked }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n            testID={testID}\n          >\n            <Animated.View\n              style={[\n                styles.radio,\n                {\n                  borderColor: selectionControlColor,\n                  borderWidth: borderAnim,\n                },\n              ]}\n            >\n              {checked ? (\n                <View style={[StyleSheet.absoluteFill, styles.radioContainer]}>\n                  <Animated.View\n                    style={[\n                      styles.dot,\n                      {\n                        backgroundColor: selectionControlColor,\n                        transform: [{ scale: radioAnim }],\n                      },\n                    ]}\n                  />\n                </View>\n              ) : null}\n            </Animated.View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonAndroid.displayName = 'RadioButton.Android';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8,\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5,\n  },\n});\n\nexport default withTheme(RadioButtonAndroid);\n\n// @component-docs ignore-next-line\nconst RadioButtonAndroidWithTheme = withTheme(RadioButtonAndroid);\n// @component-docs ignore-next-line\nexport { RadioButtonAndroidWithTheme as RadioButtonAndroid };\n"]},"metadata":{},"sourceType":"module"}