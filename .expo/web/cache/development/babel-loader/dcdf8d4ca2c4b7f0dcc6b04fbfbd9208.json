{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useTheme } from \"../../core/theming\";\nimport SegmentedButtonItem from \"./SegmentedButtonItem\";\nimport { getDisabledSegmentedButtonStyle } from \"./utils\";\n\nvar SegmentedButtons = function SegmentedButtons(_ref) {\n  var value = _ref.value,\n    onValueChange = _ref.onValueChange,\n    buttons = _ref.buttons,\n    multiSelect = _ref.multiSelect,\n    density = _ref.density,\n    style = _ref.style;\n  var theme = useTheme();\n  return React.createElement(View, {\n    style: [styles.row, style]\n  }, buttons.map(function (item, i) {\n    var disabledChildStyle = getDisabledSegmentedButtonStyle({\n      theme: theme,\n      buttons: buttons,\n      index: i\n    });\n    var segment = i === 0 ? 'first' : i === buttons.length - 1 ? 'last' : undefined;\n    var checked = multiSelect && Array.isArray(value) ? value.includes(item.value) : value === item.value;\n    var onPress = function onPress(e) {\n      var _item$onPress;\n      (_item$onPress = item.onPress) === null || _item$onPress === void 0 ? void 0 : _item$onPress.call(item, e);\n      var nextValue = multiSelect && Array.isArray(value) ? checked ? value.filter(function (val) {\n        return item.value !== val;\n      }) : [].concat(_toConsumableArray(value), [item.value]) : item.value;\n\n      onValueChange(nextValue);\n    };\n    return React.createElement(SegmentedButtonItem, _extends({}, item, {\n      key: i,\n      checked: checked,\n      segment: segment,\n      density: density,\n      onPress: onPress,\n      style: [item.style, disabledChildStyle]\n    }));\n  }));\n};\nvar styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row'\n  }\n});\nexport default SegmentedButtons;\n\nexport { SegmentedButtons };","map":{"version":3,"sources":["SegmentedButtons.tsx"],"names":["React","useTheme","SegmentedButtonItem","getDisabledSegmentedButtonStyle","SegmentedButtons","value","onValueChange","buttons","multiSelect","density","style","theme","styles","row","map","item","i","disabledChildStyle","index","segment","length","undefined","checked","Array","isArray","includes","onPress","e","nextValue","filter","val","create","flexDirection"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA;AAAA;AAQA,SAASC,QAAT;AACA,OAAOC,mBAAP;AACA,SAASC,+BAAT;;AAuGA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAG,IAAA,EAOZ;EAPa,IACxBC,KADwB,GAOb,IAAA,CANXA,KADwB;IAExBC,aAFwB,GAOb,IAAA,CALXA,aAFwB;IAGxBC,OAHwB,GAOb,IAAA,CAJXA,OAHwB;IAIxBC,WAJwB,GAOb,IAAA,CAHXA,WAJwB;IAKxBC,OALwB,GAOb,IAAA,CAFXA,OALwB;IAMxBC,KAAAA,GACW,IAAA,CADXA,KAAAA;EAEA,IAAMC,KAAK,GAAGV,QAAQ,EAAtB;EACA,OACE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAA;IAAM,KAAK,EAAE,CAACW,MAAM,CAACC,GAAR,EAAaH,KAAb;EAAb,CAAA,EACG,OAAO,CAACI,GAAR,CAAY,UAACC,IAAD,EAAOC,CAAP,EAAa;IACxB,IAAMC,kBAAkB,GAAGd,+BAA+B,CAAC;MACzDQ,KADyD,EACzDA,KADyD;MAEzDJ,OAFyD,EAEzDA,OAFyD;MAGzDW,KAAK,EAAEF;IAHkD,CAAD,CAA1D;IAKA,IAAMG,OAAO,GACXH,CAAC,KAAK,CAANA,GAAU,OAAVA,GAAoBA,CAAC,KAAKT,OAAO,CAACa,MAARb,GAAiB,CAAvBS,GAA2B,MAA3BA,GAAoCK,SAD1D;IAGA,IAAMC,OAAO,GACXd,WAAW,IAAIe,KAAK,CAACC,OAAND,CAAclB,KAAdkB,CAAff,GACIH,KAAK,CAACoB,QAANpB,CAAeU,IAAI,CAACV,KAApBA,CADJG,GAEIH,KAAK,KAAKU,IAAI,CAACV,KAHrB;IAKA,IAAMqB,OAAO,GAAIC,SAAXD,OAAO,CAAIC,CAAD,EAA8B;MAAA,IAAA,aAAA;MAC5C,CAAA,aAAA,GAAA,IAAI,CAACD,OAAL,MAAA,IAAA,IAAA,aAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,aAAA,CAAA,IAAA,CAAA,IAAI,EAAWC,CAAX,CAAJ;MAEA,IAAMC,SAAS,GACbpB,WAAW,IAAIe,KAAK,CAACC,OAAND,CAAclB,KAAdkB,CAAff,GACIc,OAAO,GACLjB,KAAK,CAACwB,MAANxB,CAAcyB,UAAAA,GAAD;QAAA,OAASf,IAAI,CAACV,KAALU,KAAee,GAArCzB;MAAAA,EADK,gCAEDA,KAAJ,IAAWU,IAAI,CAACV,KAAhB,EAHNG,GAIIO,IAAI,CAACV,KARiC;;MAW5CC,aAAa,CAACsB,SAAD,CAAbtB;IACD,CAZD;IAcA,OACE,KAAA,CAAA,aAAA,CAAC,mBAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EACMS,IADN,EAAA;MAEE,GAAG,EAAEC,CAFP;MAGE,OAAO,EAAEM,OAHX;MAIE,OAAO,EAAEH,OAJX;MAKE,OAAO,EAAEV,OALX;MAME,OAAO,EAAEiB,OANX;MAOE,KAAK,EAAE,CAACX,IAAI,CAACL,KAAN,EAAaO,kBAAb;IAPT,CAAA,CAAA,CADF;EAWD,CAvCA,CADH,CADF;AA4CD,CArDD;AAuDA,IAAML,MAAM,GAAG,UAAU,CAACmB,MAAX,CAAkB;EAC/BlB,GAAG,EAAE;IACHmB,aAAa,EAAE;EADZ;AAD0B,CAAlB,CAAf;AAMA,eAAe5B,gBAAf;;AAGA,SAASA,gBAAT","sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport { useTheme } from '../../core/theming';\nimport SegmentedButtonItem from './SegmentedButtonItem';\nimport { getDisabledSegmentedButtonStyle } from './utils';\nimport type { IconSource } from '../Icon';\n\ntype ConditionalValue =\n  | {\n      /**\n       * Array of the currently selected segmented button values.\n       */\n      value: string[];\n      /**\n       * Support multiple selected options.\n       */\n      multiSelect: true;\n      /**\n       * Function to execute on selection change\n       */\n      onValueChange: (value: string[]) => void;\n    }\n  | {\n      /**\n       * Value of the currently selected segmented button.\n       */\n      value: string;\n      /**\n       * Support multiple selected options.\n       */\n      multiSelect?: false;\n      /**\n       * Function to execute on selection change\n       */\n      onValueChange: (value: string) => void;\n    };\n\nexport type Props = {\n  /**\n   * Buttons to display as options in toggle button.\n   * Button should contain the following properties:\n   * - `value`: value of button (required)\n   * - `icon`: icon to display for the item\n   * - `disabled`: whether the button is disabled\n   * - `accessibilityLabel`: acccessibility label for the button. This is read by the screen reader when the user taps the button.\n   * - `onPress`: callback that is called when button is pressed\n   * - `label`: label text of the button\n   * - `showSelectedCheck`: show optional check icon to indicate selected state\n   * - `style`: pass additional styles for the button\n   * - `testID`: testID to be used on tests\n   */\n  buttons: {\n    value: string;\n    icon?: IconSource;\n    disabled?: boolean;\n    accessibilityLabel?: string;\n    onPress?: (event: GestureResponderEvent) => void;\n    label?: string;\n    showSelectedCheck?: boolean;\n    style?: StyleProp<ViewStyle>;\n    testID?: string;\n  }[];\n  /**\n   * Density is applied to the height, to allow usage in denser UIs\n   */\n  density?: 'regular' | 'small' | 'medium' | 'high';\n  style?: StyleProp<ViewStyle>;\n} & ConditionalValue;\n\n/**\n * @supported Available in v5.x\n * Segmented buttons can be used to select options, switch views or sort elements.</br>\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/segmented-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { SegmentedButtons } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('');\n *\n *   return (\n *     <SegmentedButtons\n *      value={value}\n *      onValueChange={setValue}\n *      buttons={[\n *        {\n *          value: 'walk',\n *          label: 'Walking',\n *        },\n *        {\n *          value: 'train',\n *          label: 'Transit',\n *        },\n *      ]}\n *      style={styles.group}\n *    />\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst SegmentedButtons = ({\n  value,\n  onValueChange,\n  buttons,\n  multiSelect,\n  density,\n  style,\n}: Props) => {\n  const theme = useTheme();\n  return (\n    <View style={[styles.row, style]}>\n      {buttons.map((item, i) => {\n        const disabledChildStyle = getDisabledSegmentedButtonStyle({\n          theme,\n          buttons,\n          index: i,\n        });\n        const segment =\n          i === 0 ? 'first' : i === buttons.length - 1 ? 'last' : undefined;\n\n        const checked =\n          multiSelect && Array.isArray(value)\n            ? value.includes(item.value)\n            : value === item.value;\n\n        const onPress = (e: GestureResponderEvent) => {\n          item.onPress?.(e);\n\n          const nextValue =\n            multiSelect && Array.isArray(value)\n              ? checked\n                ? value.filter((val) => item.value !== val)\n                : [...value, item.value]\n              : item.value;\n\n          // @ts-expect-error: TS doesn't preserve types after destructuring, so the type isn't inferred correctly\n          onValueChange(nextValue);\n        };\n\n        return (\n          <SegmentedButtonItem\n            {...item}\n            key={i}\n            checked={checked}\n            segment={segment}\n            density={density}\n            onPress={onPress}\n            style={[item.style, disabledChildStyle]}\n          />\n        );\n      })}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n});\n\nexport default SegmentedButtons;\n\n// @component-docs ignore-next-line\nexport { SegmentedButtons as SegmentedButtons };\n"]},"metadata":{},"sourceType":"module"}