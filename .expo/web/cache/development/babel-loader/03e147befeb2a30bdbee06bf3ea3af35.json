{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"label\", \"accessibilityLabel\", \"accessibilityState\", \"color\", \"disabled\", \"onPress\", \"onLongPress\", \"theme\", \"style\", \"visible\", \"uppercase\", \"testID\", \"animateFrom\", \"extended\", \"iconMode\", \"variant\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport color from 'color';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Surface from \"../Surface\";\nimport Icon from \"../Icon\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { withTheme } from \"../../core/theming\";\nimport AnimatedText from \"../Typography/AnimatedText\";\nimport { getCombinedStyles, getFABColors } from \"./utils\";\nvar SIZE = 56;\nvar SCALE = 0.9;\n\nvar AnimatedFAB = function AnimatedFAB(_ref) {\n  var icon = _ref.icon,\n      label = _ref.label,\n      _ref$accessibilityLab = _ref.accessibilityLabel,\n      accessibilityLabel = _ref$accessibilityLab === void 0 ? label : _ref$accessibilityLab,\n      accessibilityState = _ref.accessibilityState,\n      customColor = _ref.color,\n      disabled = _ref.disabled,\n      onPress = _ref.onPress,\n      onLongPress = _ref.onLongPress,\n      theme = _ref.theme,\n      style = _ref.style,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? true : _ref$visible,\n      _ref$uppercase = _ref.uppercase,\n      uppercase = _ref$uppercase === void 0 ? !theme.isV3 : _ref$uppercase,\n      testID = _ref.testID,\n      _ref$animateFrom = _ref.animateFrom,\n      animateFrom = _ref$animateFrom === void 0 ? 'right' : _ref$animateFrom,\n      _ref$extended = _ref.extended,\n      extended = _ref$extended === void 0 ? false : _ref$extended,\n      _ref$iconMode = _ref.iconMode,\n      iconMode = _ref$iconMode === void 0 ? 'dynamic' : _ref$iconMode,\n      _ref$variant = _ref.variant,\n      variant = _ref$variant === void 0 ? 'primary' : _ref$variant,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var isIOS = Platform.OS === 'ios';\n  var isAnimatedFromRight = animateFrom === 'right';\n  var isIconStatic = iconMode === 'static';\n  var isRTL = I18nManager.isRTL;\n\n  var _React$useRef = React.useRef(new Animated.Value(visible ? 1 : 0)),\n      visibility = _React$useRef.current;\n\n  var _React$useRef2 = React.useRef(new Animated.Value(0)),\n      animFAB = _React$useRef2.current;\n\n  var isV3 = theme.isV3,\n      animation = theme.animation;\n  var scale = animation.scale;\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      textWidth = _React$useState2[0],\n      setTextWidth = _React$useState2[1];\n\n  var _React$useState3 = React.useState(0),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      textHeight = _React$useState4[0],\n      setTextHeight = _React$useState4[1];\n\n  var borderRadius = SIZE / (isV3 ? 3.5 : 2);\n  React.useEffect(function () {\n    if (visible) {\n      Animated.timing(visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      Animated.timing(visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [visible, scale, visibility]);\n\n  var _getFABColors = getFABColors({\n    theme: theme,\n    variant: variant,\n    disabled: disabled,\n    customColor: customColor,\n    style: style\n  }),\n      backgroundColor = _getFABColors.backgroundColor,\n      foregroundColor = _getFABColors.foregroundColor;\n\n  var rippleColor = color(foregroundColor).alpha(0.12).rgb().string();\n  var extendedWidth = textWidth + SIZE + borderRadius;\n  var distance = isAnimatedFromRight ? -textWidth - borderRadius : textWidth + borderRadius;\n  React.useEffect(function () {\n    Animated.timing(animFAB, {\n      toValue: !extended ? 0 : distance,\n      duration: 150 * scale,\n      useNativeDriver: true,\n      easing: Easing.linear\n    }).start();\n  }, [animFAB, scale, distance, extended]);\n\n  var onTextLayout = function onTextLayout(_ref2) {\n    var nativeEvent = _ref2.nativeEvent;\n    var currentWidth = Math.ceil(nativeEvent.lines[0].width);\n    var currentHeight = Math.ceil(nativeEvent.lines[0].height);\n\n    if (currentWidth !== textWidth || currentHeight !== textHeight) {\n      setTextHeight(currentHeight);\n\n      if (isIOS) {\n        return setTextWidth(currentWidth - 12);\n      }\n\n      setTextWidth(currentWidth);\n    }\n  };\n\n  var propForDirection = function propForDirection(right) {\n    if (isAnimatedFromRight) {\n      return right;\n    }\n\n    return right.reverse();\n  };\n\n  var combinedStyles = getCombinedStyles({\n    isAnimatedFromRight: isAnimatedFromRight,\n    isIconStatic: isIconStatic,\n    distance: distance,\n    animFAB: animFAB\n  });\n  var font = isV3 ? theme.fonts.labelLarge : theme.fonts.medium;\n\n  var textStyle = _objectSpread({\n    color: foregroundColor\n  }, font);\n\n  var md2Elevation = disabled || !isIOS ? 0 : 6;\n  var md3Elevation = disabled || !isIOS ? 0 : 3;\n  return React.createElement(Surface, _extends({}, rest, {\n    style: [{\n      opacity: visibility,\n      transform: [{\n        scale: visibility\n      }],\n      borderRadius: borderRadius\n    }, !isV3 && {\n      elevation: md2Elevation\n    }, styles.container, style]\n  }, isV3 && {\n    elevation: md3Elevation\n  }), React.createElement(Animated.View, {\n    style: [!isV3 && {\n      transform: [{\n        scaleY: animFAB.interpolate({\n          inputRange: propForDirection([distance, 0]),\n          outputRange: propForDirection([SCALE, 1])\n        })\n      }]\n    }, styles.standard, {\n      borderRadius: borderRadius\n    }]\n  }, React.createElement(View, {\n    style: [StyleSheet.absoluteFill, styles.shadowWrapper]\n  }, React.createElement(Animated.View, {\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, disabled ? styles.disabled : styles.shadow, {\n      width: extendedWidth,\n      opacity: animFAB.interpolate({\n        inputRange: propForDirection([distance, 0.9 * distance, 0]),\n        outputRange: propForDirection([1, 0.15, 0])\n      }),\n      borderRadius: borderRadius\n    }]\n  }), React.createElement(Animated.View, {\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, disabled ? styles.disabled : styles.shadow, {\n      opacity: animFAB.interpolate({\n        inputRange: propForDirection([distance, 0.9 * distance, 0]),\n        outputRange: propForDirection([0, 0.85, 1])\n      }),\n      width: SIZE,\n      borderRadius: animFAB.interpolate({\n        inputRange: propForDirection([distance, 0]),\n        outputRange: propForDirection([SIZE / (extendedWidth / SIZE), borderRadius])\n      })\n    }, combinedStyles.absoluteFill]\n  })), React.createElement(Animated.View, {\n    pointerEvents: \"box-none\",\n    style: [styles.innerWrapper, {\n      borderRadius: borderRadius\n    }]\n  }, React.createElement(Animated.View, {\n    style: [styles.standard, {\n      width: extendedWidth,\n      backgroundColor: backgroundColor,\n      borderRadius: borderRadius\n    }, combinedStyles.innerWrapper]\n  }, React.createElement(TouchableRipple, {\n    borderless: true,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    rippleColor: rippleColor,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"button\",\n    accessibilityState: _objectSpread(_objectSpread({}, accessibilityState), {}, {\n      disabled: disabled\n    }),\n    testID: testID,\n    style: {\n      borderRadius: borderRadius\n    }\n  }, React.createElement(View, {\n    style: [styles.standard, {\n      width: extendedWidth,\n      borderRadius: borderRadius\n    }]\n  }))))), React.createElement(Animated.View, {\n    style: [styles.iconWrapper, combinedStyles.iconWrapper],\n    pointerEvents: \"none\"\n  }, React.createElement(Icon, {\n    source: icon,\n    size: 24,\n    color: foregroundColor\n  })), React.createElement(View, {\n    pointerEvents: \"none\"\n  }, React.createElement(AnimatedText, {\n    variant: \"labelLarge\",\n    numberOfLines: 1,\n    onTextLayout: isIOS ? onTextLayout : undefined,\n    ellipsizeMode: 'tail',\n    style: [_defineProperty({}, isAnimatedFromRight || isRTL ? 'right' : 'left', isIconStatic ? textWidth - SIZE + borderRadius / (isV3 ? 1 : 2) : borderRadius), {\n      minWidth: textWidth,\n      top: -SIZE / 2 - textHeight / 2,\n      opacity: animFAB.interpolate({\n        inputRange: propForDirection([distance, 0.7 * distance, 0]),\n        outputRange: propForDirection([1, 0, 0])\n      }),\n      transform: [{\n        translateX: animFAB.interpolate({\n          inputRange: propForDirection([distance, 0]),\n          outputRange: propForDirection([0, SIZE])\n        })\n      }]\n    }, styles.label, uppercase && styles.uppercaseLabel, textStyle]\n  }, label)), !isIOS && React.createElement(ScrollView, {\n    style: styles.textPlaceholderContainer\n  }, React.createElement(Text, {\n    onTextLayout: onTextLayout\n  }, label)));\n};\n\nvar styles = StyleSheet.create({\n  standard: {\n    height: SIZE\n  },\n  disabled: {\n    elevation: 0\n  },\n  container: {\n    position: 'absolute',\n    backgroundColor: 'transparent'\n  },\n  innerWrapper: {\n    flexDirection: 'row',\n    overflow: 'hidden'\n  },\n  shadowWrapper: {\n    elevation: 0\n  },\n  shadow: {\n    elevation: 6\n  },\n  iconWrapper: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    position: 'absolute',\n    height: SIZE,\n    width: SIZE\n  },\n  label: {\n    position: 'absolute'\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase'\n  },\n  textPlaceholderContainer: {\n    height: 0,\n    position: 'absolute'\n  }\n});\nexport default withTheme(AnimatedFAB);","map":{"version":3,"mappings":"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","names":["React","color","Surface","Icon","TouchableRipple","withTheme","AnimatedText","getCombinedStyles","getFABColors","SIZE","SCALE","AnimatedFAB","icon","label","accessibilityLabel","accessibilityState","customColor","disabled","onPress","onLongPress","theme","style","visible","uppercase","isV3","testID","animateFrom","extended","iconMode","variant","rest","isIOS","Platform","OS","isAnimatedFromRight","isIconStatic","isRTL","I18nManager","useRef","Animated","Value","visibility","current","animFAB","animation","scale","useState","textWidth","setTextWidth","textHeight","setTextHeight","borderRadius","useEffect","timing","toValue","duration","useNativeDriver","start","backgroundColor","foregroundColor","rippleColor","alpha","rgb","string","extendedWidth","distance","easing","Easing","linear","onTextLayout","nativeEvent","currentWidth","Math","ceil","lines","width","currentHeight","height","propForDirection","right","reverse","combinedStyles","font","fonts","labelLarge","medium","textStyle","md2Elevation","md3Elevation","opacity","transform","elevation","styles","container","View","scaleY","interpolate","inputRange","outputRange","standard","StyleSheet","absoluteFill","shadowWrapper","pointerEvents","shadow","innerWrapper","borderless","accessibilityRole","iconWrapper","source","size","numberOfLines","undefined","ellipsizeMode","minWidth","top","translateX","uppercaseLabel","ScrollView","textPlaceholderContainer","Text","create","position","flexDirection","overflow","alignItems","justifyContent","textTransform"],"sources":["AnimatedFAB.tsx"],"sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  Easing,\n  ScrollView,\n  Text,\n  Platform,\n  I18nManager,\n} from 'react-native';\nimport Surface from '../Surface';\nimport Icon from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport type { $RemoveChildren, Theme } from '../../types';\nimport type { IconSource } from '../Icon';\nimport { withTheme } from '../../core/theming';\nimport type {\n  AccessibilityState,\n  NativeSyntheticEvent,\n  TextLayoutEventData,\n} from 'react-native';\nimport AnimatedText from '../Typography/AnimatedText';\nimport { getCombinedStyles, getFABColors } from './utils';\n\nexport type AnimatedFABIconMode = 'static' | 'dynamic';\nexport type AnimatedFABAnimateFrom = 'left' | 'right';\n\nexport type Props = $RemoveChildren<typeof Surface> & {\n  /**\n   * Icon to display for the `FAB`.\n   */\n  icon: IconSource;\n  /**\n   * Label for extended `FAB`.\n   */\n  label: string;\n  /**\n   * Make the label text uppercased.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the FAB. This is read by the screen reader when the user taps the FAB.\n   * Uses `label` by default if specified.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility state for the FAB. This is read by the screen reader when the user taps the FAB.\n   */\n  accessibilityState?: AccessibilityState;\n  /**\n   * Custom color for the icon and label of the `FAB`.\n   */\n  color?: string;\n  /**\n   * Whether `FAB` is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether `FAB` is currently visible.\n   */\n  visible?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Whether icon should be translated to the end of extended `FAB` or be static and stay in the same place. The default value is `dynamic`.\n   */\n  iconMode?: AnimatedFABIconMode;\n  /**\n   * Indicates from which direction animation should be performed. The default value is `right`.\n   */\n  animateFrom?: AnimatedFABAnimateFrom;\n  /**\n   * Whether `FAB` should start animation to extend.\n   */\n  extended: boolean;\n  /**\n   * @supported Available in v3.x with theme version 3\n   *\n   * Color mappings variant for combinations of container and icon colors.\n   */\n  variant?: 'primary' | 'secondary' | 'tertiary' | 'surface';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  testID?: string;\n};\n\nconst SIZE = 56;\nconst SCALE = 0.9;\n\n/**\n * An animated, extending horizontally floating action button represents the primary action in an application.\n *\n * <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/animated-fab.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import React from 'react';\n * import {\n *   StyleProp,\n *   ViewStyle,\n *   Animated,\n *   StyleSheet,\n *   Platform,\n *   ScrollView,\n *   Text,\n *   SafeAreaView,\n *   I18nManager,\n * } from 'react-native';\n * import { AnimatedFAB } from 'react-native-paper';\n *\n * const MyComponent = ({\n *   animatedValue,\n *   visible,\n *   extended,\n *   label,\n *   animateFrom,\n *   style,\n *   iconMode,\n * }) => {\n *   const [isExtended, setIsExtended] = React.useState(true);\n *\n *   const isIOS = Platform.OS === 'ios';\n *\n *   const onScroll = ({ nativeEvent }) => {\n *     const currentScrollPosition =\n *       Math.floor(nativeEvent?.contentOffset?.y) ?? 0;\n *\n *     setIsExtended(currentScrollPosition <= 0);\n *   };\n *\n *   const fabStyle = { [animateFrom]: 16 };\n *\n *   return (\n *     <SafeAreaView style={styles.container}>\n *       <ScrollView onScroll={onScroll}>\n *         {[...new Array(100).keys()].map((_, i) => (\n *           <Text>{i}</Text>\n *         ))}\n *       </ScrollView>\n *       <AnimatedFAB\n *         icon={'plus'}\n *         label={'Label'}\n *         extended={isExtended}\n *         onPress={() => console.log('Pressed')}\n *         visible={visible}\n *         animateFrom={'right'}\n *         iconMode={'static'}\n *         style={[styles.fabStyle, style, fabStyle]}\n *       />\n *     </SafeAreaView>\n *   );\n * };\n *\n * export default MyComponent;\n *\n * const styles = StyleSheet.create({\n *   container: {\n *     flexGrow: 1,\n *   },\n *   fabStyle: {\n *     bottom: 16,\n *     right: 16,\n *     position: 'absolute',\n *   },\n * });\n * ```\n */\nconst AnimatedFAB = ({\n  icon,\n  label,\n  accessibilityLabel = label,\n  accessibilityState,\n  color: customColor,\n  disabled,\n  onPress,\n  onLongPress,\n  theme,\n  style,\n  visible = true,\n  uppercase = !theme.isV3,\n  testID,\n  animateFrom = 'right',\n  extended = false,\n  iconMode = 'dynamic',\n  variant = 'primary',\n  ...rest\n}: Props) => {\n  const isIOS = Platform.OS === 'ios';\n  const isAnimatedFromRight = animateFrom === 'right';\n  const isIconStatic = iconMode === 'static';\n  const { isRTL } = I18nManager;\n  const { current: visibility } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const { current: animFAB } = React.useRef<Animated.Value>(\n    new Animated.Value(0)\n  );\n  const { isV3, animation } = theme;\n  const { scale } = animation;\n\n  const [textWidth, setTextWidth] = React.useState<number>(0);\n  const [textHeight, setTextHeight] = React.useState<number>(0);\n\n  const borderRadius = SIZE / (isV3 ? 3.5 : 2);\n\n  React.useEffect(() => {\n    if (visible) {\n      Animated.timing(visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.timing(visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, visibility]);\n\n  const { backgroundColor, foregroundColor } = getFABColors({\n    theme,\n    variant,\n    disabled,\n    customColor,\n    style,\n  });\n\n  const rippleColor = color(foregroundColor).alpha(0.12).rgb().string();\n\n  const extendedWidth = textWidth + SIZE + borderRadius;\n\n  const distance = isAnimatedFromRight\n    ? -textWidth - borderRadius\n    : textWidth + borderRadius;\n\n  React.useEffect(() => {\n    Animated.timing(animFAB, {\n      toValue: !extended ? 0 : distance,\n      duration: 150 * scale,\n      useNativeDriver: true,\n      easing: Easing.linear,\n    }).start();\n  }, [animFAB, scale, distance, extended]);\n\n  const onTextLayout = ({\n    nativeEvent,\n  }: NativeSyntheticEvent<TextLayoutEventData>) => {\n    const currentWidth = Math.ceil(nativeEvent.lines[0].width);\n    const currentHeight = Math.ceil(nativeEvent.lines[0].height);\n\n    if (currentWidth !== textWidth || currentHeight !== textHeight) {\n      setTextHeight(currentHeight);\n\n      if (isIOS) {\n        return setTextWidth(currentWidth - 12);\n      }\n\n      setTextWidth(currentWidth);\n    }\n  };\n\n  const propForDirection = <T,>(right: T[]): T[] => {\n    if (isAnimatedFromRight) {\n      return right;\n    }\n\n    return right.reverse();\n  };\n\n  const combinedStyles = getCombinedStyles({\n    isAnimatedFromRight,\n    isIconStatic,\n    distance,\n    animFAB,\n  });\n\n  const font = isV3 ? theme.fonts.labelLarge : theme.fonts.medium;\n\n  const textStyle = {\n    color: foregroundColor,\n    ...font,\n  };\n\n  const md2Elevation = disabled || !isIOS ? 0 : 6;\n  const md3Elevation = disabled || !isIOS ? 0 : 3;\n\n  return (\n    <Surface\n      {...rest}\n      style={\n        [\n          {\n            opacity: visibility,\n            transform: [\n              {\n                scale: visibility,\n              },\n            ],\n            borderRadius,\n          },\n          !isV3 && {\n            elevation: md2Elevation,\n          },\n          styles.container,\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n      {...(isV3 && { elevation: md3Elevation })}\n    >\n      <Animated.View\n        style={[\n          !isV3 && {\n            transform: [\n              {\n                scaleY: animFAB.interpolate({\n                  inputRange: propForDirection([distance, 0]),\n                  outputRange: propForDirection([SCALE, 1]),\n                }),\n              },\n            ],\n          },\n          styles.standard,\n          { borderRadius },\n        ]}\n      >\n        <View style={[StyleSheet.absoluteFill, styles.shadowWrapper]}>\n          <Animated.View\n            pointerEvents=\"none\"\n            style={[\n              StyleSheet.absoluteFill,\n              disabled ? styles.disabled : styles.shadow,\n              {\n                width: extendedWidth,\n                opacity: animFAB.interpolate({\n                  inputRange: propForDirection([distance, 0.9 * distance, 0]),\n                  outputRange: propForDirection([1, 0.15, 0]),\n                }),\n                borderRadius,\n              },\n            ]}\n          />\n          <Animated.View\n            pointerEvents=\"none\"\n            style={[\n              StyleSheet.absoluteFill,\n              disabled ? styles.disabled : styles.shadow,\n              {\n                opacity: animFAB.interpolate({\n                  inputRange: propForDirection([distance, 0.9 * distance, 0]),\n                  outputRange: propForDirection([0, 0.85, 1]),\n                }),\n                width: SIZE,\n                borderRadius: animFAB.interpolate({\n                  inputRange: propForDirection([distance, 0]),\n                  outputRange: propForDirection([\n                    SIZE / (extendedWidth / SIZE),\n                    borderRadius,\n                  ]),\n                }),\n              },\n              combinedStyles.absoluteFill,\n            ]}\n          />\n        </View>\n        <Animated.View\n          pointerEvents=\"box-none\"\n          style={[styles.innerWrapper, { borderRadius }]}\n        >\n          <Animated.View\n            style={[\n              styles.standard,\n              {\n                width: extendedWidth,\n                backgroundColor,\n                borderRadius,\n              },\n              combinedStyles.innerWrapper,\n            ]}\n          >\n            <TouchableRipple\n              borderless\n              onPress={onPress}\n              onLongPress={onLongPress}\n              rippleColor={rippleColor}\n              disabled={disabled}\n              accessibilityLabel={accessibilityLabel}\n              accessibilityRole=\"button\"\n              accessibilityState={{ ...accessibilityState, disabled }}\n              testID={testID}\n              style={{ borderRadius }}\n            >\n              <View\n                style={[\n                  styles.standard,\n                  {\n                    width: extendedWidth,\n                    borderRadius,\n                  },\n                ]}\n              />\n            </TouchableRipple>\n          </Animated.View>\n        </Animated.View>\n      </Animated.View>\n\n      <Animated.View\n        style={[styles.iconWrapper, combinedStyles.iconWrapper]}\n        pointerEvents=\"none\"\n      >\n        <Icon source={icon} size={24} color={foregroundColor} />\n      </Animated.View>\n\n      <View pointerEvents=\"none\">\n        <AnimatedText\n          variant=\"labelLarge\"\n          numberOfLines={1}\n          onTextLayout={isIOS ? onTextLayout : undefined}\n          ellipsizeMode={'tail'}\n          style={[\n            {\n              [isAnimatedFromRight || isRTL ? 'right' : 'left']: isIconStatic\n                ? textWidth - SIZE + borderRadius / (isV3 ? 1 : 2)\n                : borderRadius,\n            },\n            {\n              minWidth: textWidth,\n              top: -SIZE / 2 - textHeight / 2,\n              opacity: animFAB.interpolate({\n                inputRange: propForDirection([distance, 0.7 * distance, 0]),\n                outputRange: propForDirection([1, 0, 0]),\n              }),\n              transform: [\n                {\n                  translateX: animFAB.interpolate({\n                    inputRange: propForDirection([distance, 0]),\n                    outputRange: propForDirection([0, SIZE]),\n                  }),\n                },\n              ],\n            },\n            styles.label,\n            uppercase && styles.uppercaseLabel,\n            textStyle,\n          ]}\n        >\n          {label}\n        </AnimatedText>\n      </View>\n\n      {!isIOS && (\n        // Method `onTextLayout` on Android returns sizes of text visible on the screen,\n        // however during render the text in `FAB` isn't fully visible. In order to get\n        // proper text measurements there is a need to additionaly render that text, but\n        // wrapped in absolutely positioned `ScrollView` which height is 0.\n        <ScrollView style={styles.textPlaceholderContainer}>\n          <Text onTextLayout={onTextLayout}>{label}</Text>\n        </ScrollView>\n      )}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  standard: {\n    height: SIZE,\n  },\n  disabled: {\n    elevation: 0,\n  },\n  container: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n  },\n  innerWrapper: {\n    flexDirection: 'row',\n    overflow: 'hidden',\n  },\n  shadowWrapper: {\n    elevation: 0,\n  },\n  shadow: {\n    elevation: 6,\n  },\n  iconWrapper: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    position: 'absolute',\n    height: SIZE,\n    width: SIZE,\n  },\n  label: {\n    position: 'absolute',\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n  textPlaceholderContainer: {\n    height: 0,\n    position: 'absolute',\n  },\n});\n\nexport default withTheme(AnimatedFAB);\n"]},"metadata":{},"sourceType":"module"}