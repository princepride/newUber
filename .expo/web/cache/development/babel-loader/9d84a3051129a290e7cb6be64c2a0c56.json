{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { useTheme } from \"../../core/theming\";\nimport Text from \"../Typography/Text\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport color from 'color';\nimport Icon from \"../Icon\";\nimport { getSegmentedButtonBorderRadius, getSegmentedButtonColors, getSegmentedButtonDensityPadding } from \"./utils\";\nvar SegmentedButtonItem = function SegmentedButtonItem(_ref) {\n  var checked = _ref.checked,\n    accessibilityLabel = _ref.accessibilityLabel,\n    disabled = _ref.disabled,\n    style = _ref.style,\n    showSelectedCheck = _ref.showSelectedCheck,\n    icon = _ref.icon,\n    testID = _ref.testID,\n    label = _ref.label,\n    onPress = _ref.onPress,\n    segment = _ref.segment,\n    _ref$density = _ref.density,\n    density = _ref$density === void 0 ? 'regular' : _ref$density;\n  var theme = useTheme();\n  var checkScale = React.useRef(new Animated.Value(0)).current;\n  React.useEffect(function () {\n    if (!showSelectedCheck) {\n      return;\n    }\n    if (checked) {\n      Animated.spring(checkScale, {\n        toValue: 1,\n        useNativeDriver: true\n      }).start();\n    } else {\n      Animated.spring(checkScale, {\n        toValue: 0,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [checked, checkScale, showSelectedCheck]);\n  var roundness = theme.roundness,\n    isV3 = theme.isV3;\n  var _getSegmentedButtonCo = getSegmentedButtonColors({\n      checked: checked,\n      theme: theme,\n      disabled: disabled\n    }),\n    borderColor = _getSegmentedButtonCo.borderColor,\n    textColor = _getSegmentedButtonCo.textColor,\n    borderWidth = _getSegmentedButtonCo.borderWidth,\n    backgroundColor = _getSegmentedButtonCo.backgroundColor;\n  var borderRadius = (isV3 ? 5 : 1) * roundness;\n  var segmentBorderRadius = getSegmentedButtonBorderRadius({\n    theme: theme,\n    segment: segment\n  });\n  var rippleColor = color(textColor).alpha(0.12).rgb().string();\n  var iconSize = isV3 ? 18 : 16;\n  var iconStyle = _objectSpread({\n    marginRight: label ? 5 : checked && showSelectedCheck ? 3 : 0\n  }, label && {\n    transform: [{\n      scale: checkScale.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0]\n      })\n    }]\n  });\n  var buttonStyle = _objectSpread({\n    backgroundColor: backgroundColor,\n    borderColor: borderColor,\n    borderWidth: borderWidth,\n    borderRadius: borderRadius\n  }, segmentBorderRadius);\n  var paddingVertical = getSegmentedButtonDensityPadding({\n    density: density\n  });\n  var rippleStyle = _objectSpread({\n    borderRadius: borderRadius\n  }, segmentBorderRadius);\n  var showIcon = icon && !label ? true : checked ? !showSelectedCheck : true;\n  var labelTextStyle = _objectSpread(_objectSpread({}, !isV3 ? {\n    textTransform: 'uppercase',\n    fontWeight: '500'\n  } : theme.fonts.labelLarge), {}, {\n    color: textColor\n  });\n  return React.createElement(View, {\n    style: [buttonStyle, styles.button, style]\n  }, React.createElement(TouchableRipple, {\n    borderless: true,\n    delayPressIn: 0,\n    onPress: onPress,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityState: {\n      disabled: disabled,\n      checked: checked\n    },\n    accessibilityRole: \"button\",\n    disabled: disabled,\n    rippleColor: rippleColor,\n    testID: testID,\n    style: rippleStyle\n  }, React.createElement(View, {\n    style: [styles.content, {\n      paddingVertical: paddingVertical\n    }]\n  }, checked && showSelectedCheck ? React.createElement(Animated.View, {\n    testID: testID + \"-check-icon\",\n    style: [iconStyle, {\n      transform: [{\n        scale: checkScale\n      }]\n    }]\n  }, React.createElement(Icon, {\n    source: 'check',\n    size: iconSize\n  })) : null, showIcon ? React.createElement(Animated.View, {\n    style: iconStyle\n  }, React.createElement(Icon, {\n    source: icon,\n    size: iconSize,\n    color: disabled ? textColor : undefined\n  })) : null, React.createElement(Text, {\n    variant: \"labelLarge\",\n    style: [styles.label, labelTextStyle],\n    selectable: false,\n    numberOfLines: 1\n  }, label))));\n};\nvar styles = StyleSheet.create({\n  button: {\n    minWidth: 76,\n    borderStyle: 'solid'\n  },\n  label: {\n    textAlign: 'center'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 9,\n    paddingHorizontal: 16\n  }\n});\nexport default SegmentedButtonItem;\nvar SegmentedButtonWithTheme = SegmentedButtonItem;\nexport { SegmentedButtonWithTheme as SegmentedButton };","map":{"version":3,"sources":["SegmentedButtonItem.tsx"],"names":["React","useTheme","Text","TouchableRipple","color","Icon","getSegmentedButtonBorderRadius","getSegmentedButtonColors","getSegmentedButtonDensityPadding","SegmentedButtonItem","checked","accessibilityLabel","disabled","style","showSelectedCheck","icon","testID","label","onPress","segment","density","theme","checkScale","useRef","Animated","Value","current","useEffect","spring","toValue","useNativeDriver","start","roundness","isV3","borderColor","textColor","borderWidth","backgroundColor","borderRadius","segmentBorderRadius","rippleColor","alpha","rgb","string","iconSize","iconStyle","marginRight","transform","scale","interpolate","inputRange","outputRange","buttonStyle","paddingVertical","rippleStyle","showIcon","labelTextStyle","textTransform","fontWeight","fonts","labelLarge","styles","button","content","undefined","create","minWidth","borderStyle","textAlign","flexDirection","alignItems","justifyContent","paddingHorizontal","SegmentedButtonWithTheme","SegmentedButton"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  ViewStyle,\n  GestureResponderEvent,\n  StyleSheet,\n  View,\n  TextStyle,\n  Animated,\n} from 'react-native';\nimport { useTheme } from '../../core/theming';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport type { IconSource } from '../Icon';\nimport color from 'color';\nimport Icon from '../Icon';\nimport {\n  getSegmentedButtonBorderRadius,\n  getSegmentedButtonColors,\n  getSegmentedButtonDensityPadding,\n} from './utils';\n\nexport type Props = {\n  /**\n   * Whether the segmented button is checked\n   */\n  checked: boolean;\n  /**\n   * Icon to display for the `SegmentedButtonItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `SegmentedButtonItem`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (event: GestureResponderEvent) => void;\n  /**\n   * Value of button.\n   */\n  value: string;\n  /**\n   * Label text of the button.\n   */\n  label?: string;\n  /**\n   * Button segment.\n   */\n  segment?: 'first' | 'last';\n  /**\n   * Show optional check icon to indicate selected state\n   */\n  showSelectedCheck?: boolean;\n  /**\n   * Density is applied to the height, to allow usage in denser UIs.\n   */\n  density?: 'regular' | 'small' | 'medium' | 'high';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\nconst SegmentedButtonItem = ({\n  checked,\n  accessibilityLabel,\n  disabled,\n  style,\n  showSelectedCheck,\n  icon,\n  testID,\n  label,\n  onPress,\n  segment,\n  density = 'regular',\n}: Props) => {\n  const theme = useTheme();\n\n  const checkScale = React.useRef(new Animated.Value(0)).current;\n\n  React.useEffect(() => {\n    if (!showSelectedCheck) {\n      return;\n    }\n    if (checked) {\n      Animated.spring(checkScale, {\n        toValue: 1,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.spring(checkScale, {\n        toValue: 0,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [checked, checkScale, showSelectedCheck]);\n\n  const { roundness, isV3 } = theme;\n  const { borderColor, textColor, borderWidth, backgroundColor } =\n    getSegmentedButtonColors({\n      checked,\n      theme,\n      disabled,\n    });\n\n  const borderRadius = (isV3 ? 5 : 1) * roundness;\n  const segmentBorderRadius = getSegmentedButtonBorderRadius({\n    theme,\n    segment,\n  });\n  const rippleColor = color(textColor).alpha(0.12).rgb().string();\n\n  const iconSize = isV3 ? 18 : 16;\n  const iconStyle = {\n    marginRight: label ? 5 : checked && showSelectedCheck ? 3 : 0,\n    ...(label && {\n      transform: [\n        {\n          scale: checkScale.interpolate({\n            inputRange: [0, 1],\n            outputRange: [1, 0],\n          }),\n        },\n      ],\n    }),\n  };\n\n  const buttonStyle: ViewStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius,\n    ...segmentBorderRadius,\n  };\n  const paddingVertical = getSegmentedButtonDensityPadding({ density });\n  const rippleStyle: ViewStyle = {\n    borderRadius,\n    ...segmentBorderRadius,\n  };\n  const showIcon = icon && !label ? true : checked ? !showSelectedCheck : true;\n  const labelTextStyle: TextStyle = {\n    ...(!isV3\n      ? {\n          textTransform: 'uppercase',\n          fontWeight: '500',\n        }\n      : theme.fonts.labelLarge),\n    color: textColor,\n  };\n\n  return (\n    <View style={[buttonStyle, styles.button, style]}>\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityState={{ disabled, checked }}\n        accessibilityRole=\"button\"\n        disabled={disabled}\n        rippleColor={rippleColor}\n        testID={testID}\n        style={rippleStyle}\n      >\n        <View style={[styles.content, { paddingVertical }]}>\n          {checked && showSelectedCheck ? (\n            <Animated.View\n              testID={`${testID}-check-icon`}\n              style={[iconStyle, { transform: [{ scale: checkScale }] }]}\n            >\n              <Icon source={'check'} size={iconSize} />\n            </Animated.View>\n          ) : null}\n          {showIcon ? (\n            <Animated.View style={iconStyle}>\n              <Icon\n                source={icon}\n                size={iconSize}\n                color={disabled ? textColor : undefined}\n              />\n            </Animated.View>\n          ) : null}\n          <Text\n            variant=\"labelLarge\"\n            style={[styles.label, labelTextStyle]}\n            selectable={false}\n            numberOfLines={1}\n          >\n            {label}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 76,\n    borderStyle: 'solid',\n  },\n  label: {\n    textAlign: 'center',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 9,\n    paddingHorizontal: 16,\n  },\n});\n\nexport default SegmentedButtonItem;\n\nconst SegmentedButtonWithTheme = SegmentedButtonItem;\nexport { SegmentedButtonWithTheme as SegmentedButton };\n"]},"metadata":{},"sourceType":"module"}