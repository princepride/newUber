{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"label\", \"accessibilityLabel\", \"accessibilityState\", \"animated\", \"color\", \"disabled\", \"onPress\", \"onLongPress\", \"theme\", \"style\", \"visible\", \"uppercase\", \"loading\", \"testID\", \"size\", \"customSize\", \"mode\", \"variant\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"../ActivityIndicator\";\nimport Surface from \"../Surface\";\nimport CrossFadeIcon from \"../CrossFadeIcon\";\nimport Icon from \"../Icon\";\nimport Text from \"../Typography/Text\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { withTheme } from \"../../core/theming\";\nimport { getExtendedFabStyle, getFABColors, getFabStyle } from \"./utils\";\n\nvar FAB = function FAB(_ref) {\n  var icon = _ref.icon,\n    label = _ref.label,\n    _ref$accessibilityLab = _ref.accessibilityLabel,\n    accessibilityLabel = _ref$accessibilityLab === void 0 ? label : _ref$accessibilityLab,\n    accessibilityState = _ref.accessibilityState,\n    _ref$animated = _ref.animated,\n    animated = _ref$animated === void 0 ? true : _ref$animated,\n    customColor = _ref.color,\n    disabled = _ref.disabled,\n    onPress = _ref.onPress,\n    onLongPress = _ref.onLongPress,\n    theme = _ref.theme,\n    style = _ref.style,\n    _ref$visible = _ref.visible,\n    visible = _ref$visible === void 0 ? true : _ref$visible,\n    _ref$uppercase = _ref.uppercase,\n    uppercase = _ref$uppercase === void 0 ? !theme.isV3 : _ref$uppercase,\n    loading = _ref.loading,\n    _ref$testID = _ref.testID,\n    testID = _ref$testID === void 0 ? 'fab' : _ref$testID,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? 'medium' : _ref$size,\n    customSize = _ref.customSize,\n    _ref$mode = _ref.mode,\n    mode = _ref$mode === void 0 ? 'elevated' : _ref$mode,\n    _ref$variant = _ref.variant,\n    variant = _ref$variant === void 0 ? 'primary' : _ref$variant,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _React$useRef = React.useRef(new Animated.Value(visible ? 1 : 0)),\n    visibility = _React$useRef.current;\n  var isV3 = theme.isV3,\n    animation = theme.animation;\n  var scale = animation.scale;\n  React.useEffect(function () {\n    if (visible) {\n      Animated.timing(visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      Animated.timing(visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [visible, scale, visibility]);\n  var IconComponent = animated ? CrossFadeIcon : Icon;\n  var _getFABColors = getFABColors({\n      theme: theme,\n      variant: variant,\n      disabled: disabled,\n      customColor: customColor,\n      style: style\n    }),\n    backgroundColor = _getFABColors.backgroundColor,\n    foregroundColor = _getFABColors.foregroundColor,\n    rippleColor = _getFABColors.rippleColor;\n  var isLargeSize = size === 'large';\n  var isFlatMode = mode === 'flat';\n  var iconSize = isLargeSize ? 36 : 24;\n  var loadingIndicatorSize = isLargeSize ? 24 : 18;\n  var font = isV3 ? theme.fonts.labelLarge : theme.fonts.medium;\n  var fabStyle = getFabStyle({\n    customSize: customSize,\n    size: size,\n    theme: theme\n  });\n  var extendedStyle = getExtendedFabStyle({\n    customSize: customSize,\n    theme: theme\n  });\n  var textStyle = _objectSpread({\n    color: foregroundColor\n  }, font);\n  var _ref2 = StyleSheet.flatten(style) || {},\n    _ref2$borderRadius = _ref2.borderRadius,\n    borderRadius = _ref2$borderRadius === void 0 ? fabStyle.borderRadius : _ref2$borderRadius;\n  var md3Elevation = isFlatMode || disabled ? 0 : 3;\n  return React.createElement(Surface, _extends({}, rest, {\n    style: [{\n      borderRadius: borderRadius,\n      backgroundColor: backgroundColor,\n      opacity: visibility,\n      transform: [{\n        scale: visibility\n      }]\n    }, styles.container, !isV3 && styles.elevated, !isV3 && disabled && styles.disabled, style],\n    pointerEvents: visible ? 'auto' : 'none',\n    testID: testID + \"-container\"\n  }, isV3 && {\n    elevation: md3Elevation\n  }), React.createElement(TouchableRipple, {\n    borderless: true,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    rippleColor: rippleColor,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"button\",\n    accessibilityState: _objectSpread(_objectSpread({}, accessibilityState), {}, {\n      disabled: disabled\n    }),\n    testID: testID\n  }, React.createElement(View, {\n    style: [styles.content, label ? extendedStyle : fabStyle],\n    testID: testID + \"-content\",\n    pointerEvents: \"none\"\n  }, icon && loading !== true ? React.createElement(IconComponent, {\n    source: icon,\n    size: customSize ? customSize / 2 : iconSize,\n    color: foregroundColor\n  }) : null, loading ? React.createElement(ActivityIndicator, {\n    size: customSize ? customSize / 2 : loadingIndicatorSize,\n    color: foregroundColor\n  }) : null, label ? React.createElement(Text, {\n    variant: \"labelLarge\",\n    selectable: false,\n    style: [styles.label, uppercase && styles.uppercaseLabel, textStyle]\n  }, label) : null)));\n};\nvar styles = StyleSheet.create({\n  elevated: {\n    elevation: 6\n  },\n  container: {\n    overflow: 'hidden'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  label: {\n    marginHorizontal: 8\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase'\n  },\n  disabled: {\n    elevation: 0\n  }\n});\nexport default withTheme(FAB);\n\nvar FABWithTheme = withTheme(FAB);\n\nexport { FABWithTheme as FAB };","map":{"version":3,"sources":["FAB.tsx"],"names":["React","ActivityIndicator","Surface","CrossFadeIcon","Icon","Text","TouchableRipple","withTheme","getExtendedFabStyle","getFABColors","getFabStyle","FAB","icon","label","accessibilityLabel","accessibilityState","animated","color","customColor","disabled","onPress","onLongPress","theme","style","visible","uppercase","isV3","loading","testID","size","customSize","mode","variant","rest","current","visibility","useRef","Animated","Value","animation","scale","useEffect","timing","toValue","duration","useNativeDriver","start","IconComponent","backgroundColor","foregroundColor","rippleColor","isLargeSize","isFlatMode","iconSize","loadingIndicatorSize","font","fonts","labelLarge","medium","fabStyle","extendedStyle","textStyle","borderRadius","StyleSheet","flatten","md3Elevation","opacity","transform","styles","container","elevated","elevation","content","uppercaseLabel","create","overflow","flexDirection","alignItems","justifyContent","marginHorizontal","textTransform","FABWithTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  AccessibilityState,\n} from 'react-native';\nimport ActivityIndicator from '../ActivityIndicator';\nimport Surface from '../Surface';\nimport CrossFadeIcon from '../CrossFadeIcon';\nimport Icon, { IconSource } from '../Icon';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport { getExtendedFabStyle, getFABColors, getFabStyle } from './utils';\nimport type { $RemoveChildren, Theme } from '../../types';\n\ntype FABSize = 'small' | 'medium' | 'large';\n\ntype FABMode = 'flat' | 'elevated';\n\nexport type Props = $RemoveChildren<typeof Surface> & {\n  /**\n   * Icon to display for the `FAB`.\n   */\n  icon: IconSource;\n  /**\n   * Optional label for extended `FAB`.\n   */\n  label?: string;\n  /**\n   * Make the label text uppercased.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the FAB. This is read by the screen reader when the user taps the FAB.\n   * Uses `label` by default if specified.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility state for the FAB. This is read by the screen reader when the user taps the FAB.\n   */\n  accessibilityState?: AccessibilityState;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   *  @deprecated Deprecated in v.3x - use prop size=\"small\".\n   *\n   *  Whether FAB is mini-sized, used to create visual continuity with other elements. This has no effect if `label` is specified.\n   */\n  small?: boolean;\n  /**\n   * Custom color for the icon and label of the `FAB`.\n   */\n  color?: string;\n  /**\n   * Whether `FAB` is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether `FAB` is currently visible.\n   */\n  visible?: boolean;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Size of the `FAB`.\n   * - `small` - FAB with small height (40).\n   * - `medium` - FAB with default medium height (56).\n   * - `large` - FAB with large height (96).\n   */\n  size?: FABSize;\n  /**\n   * @supported Available in v5.x\n   *\n   * Custom size for the `FAB`. This prop takes precedence over size prop\n   */\n  customSize?: number;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Mode of the `FAB`. You can change the mode to adjust the the shadow:\n   * - `flat` - button without a shadow.\n   * - `elevated` - button with a shadow.\n   */\n  mode?: FABMode;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Color mappings variant for combinations of container and icon colors.\n   */\n  variant?: 'primary' | 'secondary' | 'tertiary' | 'surface';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  testID?: string;\n};\n\n/**\n * A floating action button represents the primary action in an application.\n * <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/fab-1.png\" />\n *   <img class=\"small\" src=\"screenshots/fab-2.png\" />\n *   <img class=\"small\" src=\"screenshots/fab-3.png\" />\n *   <img class=\"small\" src=\"screenshots/fab-4.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { StyleSheet } from 'react-native';\n * import { FAB } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <FAB\n *     icon=\"plus\"\n *     style={styles.fab}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * const styles = StyleSheet.create({\n *   fab: {\n *     position: 'absolute',\n *     margin: 16,\n *     right: 0,\n *     bottom: 0,\n *   },\n * })\n *\n * export default MyComponent;\n * ```\n */\nconst FAB = ({\n  icon,\n  label,\n  accessibilityLabel = label,\n  accessibilityState,\n  animated = true,\n  color: customColor,\n  disabled,\n  onPress,\n  onLongPress,\n  theme,\n  style,\n  visible = true,\n  uppercase = !theme.isV3,\n  loading,\n  testID = 'fab',\n  size = 'medium',\n  customSize,\n  mode = 'elevated',\n  variant = 'primary',\n  ...rest\n}: Props) => {\n  const { current: visibility } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const { isV3, animation } = theme;\n  const { scale } = animation;\n\n  React.useEffect(() => {\n    if (visible) {\n      Animated.timing(visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.timing(visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, visibility]);\n\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n\n  const { backgroundColor, foregroundColor, rippleColor } = getFABColors({\n    theme,\n    variant,\n    disabled,\n    customColor,\n    style,\n  });\n\n  const isLargeSize = size === 'large';\n  const isFlatMode = mode === 'flat';\n  const iconSize = isLargeSize ? 36 : 24;\n  const loadingIndicatorSize = isLargeSize ? 24 : 18;\n  const font = isV3 ? theme.fonts.labelLarge : theme.fonts.medium;\n\n  const fabStyle = getFabStyle({ customSize, size, theme });\n  const extendedStyle = getExtendedFabStyle({ customSize, theme });\n  const textStyle = {\n    color: foregroundColor,\n    ...font,\n  };\n\n  const { borderRadius = fabStyle.borderRadius } = (StyleSheet.flatten(style) ||\n    {}) as ViewStyle;\n\n  const md3Elevation = isFlatMode || disabled ? 0 : 3;\n\n  return (\n    <Surface\n      {...rest}\n      style={\n        [\n          {\n            borderRadius,\n            backgroundColor,\n            opacity: visibility,\n            transform: [\n              {\n                scale: visibility,\n              },\n            ],\n          },\n          styles.container,\n          !isV3 && styles.elevated,\n          !isV3 && disabled && styles.disabled,\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n      pointerEvents={visible ? 'auto' : 'none'}\n      testID={`${testID}-container`}\n      {...(isV3 && { elevation: md3Elevation })}\n    >\n      <TouchableRipple\n        borderless\n        onPress={onPress}\n        onLongPress={onLongPress}\n        rippleColor={rippleColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        accessibilityState={{ ...accessibilityState, disabled }}\n        testID={testID}\n      >\n        <View\n          style={[styles.content, label ? extendedStyle : fabStyle]}\n          testID={`${testID}-content`}\n          pointerEvents=\"none\"\n        >\n          {icon && loading !== true ? (\n            <IconComponent\n              source={icon}\n              size={customSize ? customSize / 2 : iconSize}\n              color={foregroundColor}\n            />\n          ) : null}\n          {loading ? (\n            <ActivityIndicator\n              size={customSize ? customSize / 2 : loadingIndicatorSize}\n              color={foregroundColor}\n            />\n          ) : null}\n          {label ? (\n            <Text\n              variant=\"labelLarge\"\n              selectable={false}\n              style={[\n                styles.label,\n                uppercase && styles.uppercaseLabel,\n                textStyle,\n              ]}\n            >\n              {label}\n            </Text>\n          ) : null}\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  elevated: {\n    elevation: 6,\n  },\n  container: {\n    overflow: 'hidden',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  label: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n  disabled: {\n    elevation: 0,\n  },\n});\n\nexport default withTheme(FAB);\n\n// @component-docs ignore-next-line\nconst FABWithTheme = withTheme(FAB);\n// @component-docs ignore-next-line\nexport { FABWithTheme as FAB };\n"]},"metadata":{},"sourceType":"module"}