{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _templateObject, _templateObject2;\n\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport tw from 'tailwind-react-native-classnames';\nimport React, { useState } from 'react';\nimport { SegmentedButtons } from 'react-native-paper';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar TimePicker = function TimePicker() {\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  return _jsx(View, {\n    style: tw(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"justify-center items-center\"]))),\n    children: _jsx(View, {\n      style: tw(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"absolute bg-yellow-400 w-5/6 h-60 items-center justify-center\"]))),\n      children: _jsx(SegmentedButtons, {\n        value: value,\n        onValueChange: setValue,\n        buttons: [{\n          value: 'startTime',\n          label: 'Start'\n        }, {\n          value: 'endTime',\n          label: 'End'\n        }],\n        style: styles.group\n      })\n    })\n  });\n};\n\nexport default TimePicker;\nvar styles = StyleSheet.create({});","map":{"version":3,"names":["tw","React","useState","SegmentedButtons","TimePicker","value","setValue","label","styles","group","StyleSheet","create"],"sources":["C:/Users/wangz/Desktop/newUber/components/TimePicker.jsx"],"sourcesContent":["import { StyleSheet, Text, View } from 'react-native'\r\nimport tw from 'tailwind-react-native-classnames'\r\nimport React,{useState} from 'react'\r\nimport { SegmentedButtons } from 'react-native-paper';\r\n\r\nconst TimePicker = () => {\r\n  const [value, setValue] = React.useState('');\r\n  return (\r\n    <View style={tw`justify-center items-center`} >\r\n    <View style={tw`absolute bg-yellow-400 w-5/6 h-60 items-center justify-center`}>\r\n    <SegmentedButtons\r\n     value={value}\r\n     onValueChange={setValue}\r\n     buttons={[\r\n       {\r\n         value: 'startTime',\r\n         label: 'Start',\r\n       },\r\n       {\r\n         value: 'endTime',\r\n         label: 'End',\r\n       },\r\n     ]}\r\n     style={styles.group}\r\n   />\r\n    </View>\r\n    </View>\r\n  )\r\n}\r\n\r\nexport default TimePicker\r\n\r\nconst styles = StyleSheet.create({})"],"mappings":";;;;;;;;AACA,OAAOA,EAAP,MAAe,kCAAf;AACA,OAAOC,KAAP,IAAcC,QAAd,QAA6B,OAA7B;AACA,SAASC,gBAAT,QAAiC,oBAAjC;;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;EACvB,sBAA0BH,KAAK,CAACC,QAAN,CAAe,EAAf,CAA1B;EAAA;EAAA,IAAOG,KAAP;EAAA,IAAcC,QAAd;;EACA,OACE,KAAC,IAAD;IAAM,KAAK,EAAEN,EAAF,qGAAX;IAAA,UACA,KAAC,IAAD;MAAM,KAAK,EAAEA,EAAF,yIAAX;MAAA,UACA,KAAC,gBAAD;QACC,KAAK,EAAEK,KADR;QAEC,aAAa,EAAEC,QAFhB;QAGC,OAAO,EAAE,CACP;UACED,KAAK,EAAE,WADT;UAEEE,KAAK,EAAE;QAFT,CADO,EAKP;UACEF,KAAK,EAAE,SADT;UAEEE,KAAK,EAAE;QAFT,CALO,CAHV;QAaC,KAAK,EAAEC,MAAM,CAACC;MAbf;IADA;EADA,EADF;AAqBD,CAvBD;;AAyBA,eAAeL,UAAf;AAEA,IAAMI,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB,EAAlB,CAAf"},"metadata":{},"sourceType":"module"}